#!/usr/bin/env node
"use strict";const e=require("path"),t=require("fs"),s=require("os"),n=require("ipaddr.js"),a=require("http"),r=require("https"),i=require("cluster"),o=require("zlib"),l=require("crypto"),c=require("vm"),u=require("seedrandom"),f=require("child_process"),p=require("readline"),d=require("@breejs/later"),m=require("mongodb"),h=require("parsimmon"),g=require("espresso-iisojs"),v=require("stream"),w=require("util"),b=require("iconv-lite");function y(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function S(e){if(e&&e.__esModule)return e;const t=Object.create(null);if(e)for(const s in e)if("default"!==s){const n=Object.getOwnPropertyDescriptor(e,s);Object.defineProperty(t,s,n.get?n:{enumerable:!0,get:function(){return e[s]}})}return t.default=e,Object.freeze(t)}const _=S(e),x=S(t),O=S(s),N=S(a),R=S(r),D=y(i),T=S(o),A=S(l),C=S(c),E=y(u),I=y(p),$=S(d),L=y(h);let k,P,j,M,F,q,U=e.resolve(__dirname,"..");for(;!t.existsSync(`${U}/package.json`);){const t=e.resolve(U,"..");if(t===U){U=process.cwd();break}U=t}const V={EXT_DIR:{type:"path",default:e.resolve(U,"config/ext")},MONGODB_CONNECTION_URL:{type:"string",default:"mongodb://127.0.0.1/device_manager"},CWMP_WORKER_PROCESSES:{type:"int",default:0},CWMP_PORT:{type:"int",default:7547},CWMP_INTERFACE:{type:"string",default:"::"},CWMP_SSL_CERT:{type:"string",default:""},CWMP_SSL_KEY:{type:"string",default:""},CWMP_LOG_FILE:{type:"path",default:""},CWMP_ACCESS_LOG_FILE:{type:"path",default:""},NBI_WORKER_PROCESSES:{type:"int",default:0},NBI_PORT:{type:"int",default:7557},NBI_INTERFACE:{type:"string",default:"::"},NBI_SSL_CERT:{type:"string",default:""},NBI_SSL_KEY:{type:"string",default:""},NBI_LOG_FILE:{type:"path",default:""},NBI_ACCESS_LOG_FILE:{type:"path",default:""},FS_WORKER_PROCESSES:{type:"int",default:0},FS_PORT:{type:"int",default:7567},FS_INTERFACE:{type:"string",default:"::"},FS_SSL_CERT:{type:"string",default:""},FS_SSL_KEY:{type:"string",default:""},FS_URL_PREFIX:{type:"string",default:""},FS_LOG_FILE:{type:"path",default:""},FS_ACCESS_LOG_FILE:{type:"path",default:""},UI_WORKER_PROCESSES:{type:"int",default:0},UI_PORT:{type:"int",default:3e3},UI_INTERFACE:{type:"string",default:"::"},UI_SSL_CERT:{type:"string",default:""},UI_SSL_KEY:{type:"string",default:""},UI_LOG_FILE:{type:"path",default:""},UI_ACCESS_LOG_FILE:{type:"path",default:""},UI_JWT_SECRET:{type:"string",default:""},UDP_CONNECTION_REQUEST_PORT:{type:"int",default:0},FORWARDED_HEADER:{type:"string",default:""},DOWNLOAD_TIMEOUT:{type:"int",default:3600},EXT_TIMEOUT:{type:"int",default:3e3},MAX_CACHE_TTL:{type:"int",default:86400},DEBUG_FILE:{type:"path",default:""},DEBUG_FORMAT:{type:"string",default:"yaml"},DEBUG:{type:"bool",default:!1},RETRY_DELAY:{type:"int",default:300},SESSION_TIMEOUT:{type:"int",default:30},CONNECTION_REQUEST_TIMEOUT:{type:"int",default:2e3},GPN_NEXT_LEVEL:{type:"int",default:0},GPV_BATCH_SIZE:{type:"int",default:32},MAX_DEPTH:{type:"int",default:16},COOKIES_PATH:{type:"string"},LOG_FORMAT:{type:"string",default:"simple"},ACCESS_LOG_FORMAT:{type:"string",default:""},MAX_CONCURRENT_REQUESTS:{type:"int",default:20},DATETIME_MILLISECONDS:{type:"bool",default:!0},BOOLEAN_LITERAL:{type:"bool",default:!0},CONNECTION_REQUEST_ALLOW_BASIC_AUTH:{type:"bool",default:!1},MAX_COMMIT_ITERATIONS:{type:"int",default:32},DEVICE_ONLINE_THRESHOLD:{type:"int",default:4e3}},G={};function W(t,s,n=!1){if(null!=G[t])return!0;function a(t,s){switch(s){case"int":return Number(t);case"bool":return["true","1"].includes(String(t).trim().toLowerCase());case"string":return String(t);case"path":return t?e.resolve(t):"";default:return null}}"CONFIG_DIR"!==t&&"config-dir"!==t||(k=k||e.resolve(U,s)),"CWMP_SSL"!==t&&"cwmp-ssl"!==t||(P=P||String(s).toLowerCase().trim()),"NBI_SSL"!==t&&"nbi-ssl"!==t||(j=j||String(s).toLowerCase().trim()),"FS_SSL"!==t&&"fs-ssl"!==t||(M=M||String(s).toLowerCase().trim()),"UI_SSL"!==t&&"ui-ssl"!==t||(F=F||String(s).toLowerCase().trim()),"FS_HOSTNAME"!==t&&"fs-hostname"!==t||(q=q||String(s).trim()),"PRESETS_CACHE_DURATION"!==t&&"presets-cache-duration"!==t||W("MAX_CACHE_TTL",s),"GET_PARAMETER_NAMES_DEPTH_THRESHOLD"!==t&&"get-parameter-names-depth-threshold"!==t||W("GPN_NEXT_LEVEL",s),"TASK_PARAMETERS_BATCH_SIZE"!==t&&"task-parameters-batch-size"!==t||W("GPV_BATCH_SIZE",s),"FS_IP"!==t&&"fs-ip"!==t||W("FS_HOSTNAME",s);let r=null;for(const[e,i]of Object.entries(V)){let o=e;if(n&&(o=o.toLowerCase().replace(/_/g,"-")),t===o?(r=a(s,i.type),o=e):t.startsWith(`${o}-`)&&(r=a(s,i.type),o=`${e}-${t.slice(e.length+1)}`),null!=r)return G[o]=r,process.env[`GENIEACS_${o}`]=r,!0}return!1}const B=process.argv.slice(2);for(;B.length;){const e=B.shift();if("-"===e[0]){const t=B.shift();W(e.slice(2),t,!0)}}for(const[e,t]of Object.entries(process.env))e.startsWith("GENIEACS_")&&W(e.slice(9),t);const z=k?`${k}/config.json`:`${U}/config/config.json`;if(t.existsSync(z)){const e=JSON.parse(t.readFileSync(z).toString());for(const[t,s]of Object.entries(e))W(t,s)||(process.env[`GENIEACS_${t}`]=`${s}`)}if(k&&W("EXT_DIR",`${k}/ext`),["true","1"].includes(P)){const e=k||`${U}/config`;W("CWMP_SSL_CERT",`${e}/cwmp.crt`),W("CWMP_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(j)){const e=k||`${U}/config`;W("NBI_SSL_CERT",`${e}/cwmp.crt`),W("NBI_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(M)){const e=k||`${U}/config`;W("FS_SSL_CERT",`${e}/cwmp.crt`),W("FS_SSL_KEY",`${e}/cwmp.key`)}if(["true","1"].includes(F)){const e=k||`${U}/config`;W("UI_SSL_CERT",`${e}/cwmp.crt`),W("UI_SSL_KEY",`${e}/cwmp.key`)}if(q){const e=G.FS_PORT||7567;W("FS_URL_PREFIX",(!!G.FS_SSL_CERT?"https":"http")+`://${q}:${e}/`)}for(const[e,t]of Object.entries(V))null!=t.default&&W(e,t.default);function J(e,t){if(!t)return G[e];let s=G[e=`${e}-${t}`];if(null!=s)return s;let n=e.lastIndexOf("-");return s=G[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),s=G[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),s=G[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),n>0&&(s=G[e.slice(0,n)],null!=s)?s:null)))}let K,H,X=!1;const Z=new WeakMap;function Y(e=!0){return X=e,new Promise(((e,t)=>{var s,n;setTimeout((()=>{t(new Error("Could not close server in a timely manner"))}),3e4).unref(),s=2e4,n=e,K?(setTimeout((()=>{if(!n)return;K.removeListener("request",H),K.setTimeout(1);const e=n;n=null,setTimeout(e,1e3)}),s).unref(),K.close((()=>{if(!n)return;const e=n;n=null,setTimeout(e,50)}))):n()}))}function Q(e){var t;return Z.get(null!==(t=e._parent)&&void 0!==t?t:e)}const ee=""+J("FORWARDED_HEADER"),te=new WeakMap,se=[];for(const e of ee.split(",").map((e=>e.trim())))try{se.push(n.parseCIDR(e))}catch(t){try{const t=n.parse(e);se.push([t,8*t.toByteArray().length])}catch(e){}}function ne(e){let t=te.get(e);if(!t){const s=Q(e.socket);t={localAddress:s.localAddress,localPort:s.localPort,remoteAddress:s.remoteAddress,remotePort:s.remotePort,host:e.headers.host,encrypted:!!e.socket.encrypted};const a=e.headers.forwarded;if(a){const e=n.parse(s.remoteAddress);if(se.some((t=>e.kind()===t[0].kind()&&e.match(t)))){const e=function(e){e=e.toLowerCase();const t={};let s,n=0,a=-1;for(let r=0;r<e.length;++r){const i=e.charCodeAt(r);if(61===i)n>=0&&(s=e.slice(n,r).trim(),n=-1,a=r+1);else if(59===i)a>=0&&(t[s]=e.slice(a,r).trim()),a=-1,n=r+1;else{if(44===i)return a>=0&&(t[s]=e.slice(a,r).trim()),t;if(34===i&&a>=0){const i=r;if(!e.slice(a,i).trim())for(r+=1;r<e.length;++r){const o=e.charCodeAt(r);if(92===o&&++r,34===o){t[s]=JSON.parse(e.slice(i,r+1).trim()),a=-1,n=r+1;break}}}}}return a>=0&&(t[s]=e.slice(a).trim()),t}(a);if("https"===e.proto?(t.encrypted=!0,t.localPort=443):"http"===e.proto&&(t.encrypted=!1,t.localPort=80),e.host){t.host=e.host;const[,s]=e.host.split(":",2);t.localPort=+s||t.localPort}if(e.for)if(e.for.startsWith("[")){const s=e.for.lastIndexOf("]");s>=0&&(t.remoteAddress=e.for.slice(1,s),t.remotePort=parseInt(e.for.slice(s+2))||t.remotePort)}else{const s=e.for.lastIndexOf(":");s>=0?(t.remoteAddress=e.for.slice(0,s),t.remotePort=parseInt(e.for.slice(s+1))||t.remotePort):t.remoteAddress=e.for}if(e.by)if(e.by.startsWith("[")){const s=e.by.lastIndexOf("]");s>=0&&(t.localAddress=e.by.slice(1,s),t.localPort=parseInt(e.by.slice(s+2))||t.localPort)}else{const s=e.by.lastIndexOf(":");s>=0?(t.localAddress=e.by.slice(0,s),t.localPort=parseInt(e.by.slice(s+1))||t.localPort):t.localAddress=e.by}}}te.set(e,t)}return t}const ae=J("LOG_FORMAT"),re=J("ACCESS_LOG_FORMAT")||ae,ie={};let oe,le,ce=!1,ue=!1,fe=x.createWriteStream(null,{fd:process.stderr.fd}),pe=x.fstatSync(fe.fd),de=x.createWriteStream(null,{fd:process.stdout.fd}),me=x.fstatSync(de.fd);function he(){let e=1;oe&&(++e,x.stat(oe,((t,s)=>{if(t&&!t.message.startsWith("ENOENT:"))throw t;s&&s.dev===pe.dev&&s.ino===pe.ino||(fe.end(),fe=x.createWriteStream(null,{fd:x.openSync(oe,"a")}),pe=x.fstatSync(fe.fd)),0==--e&&setTimeout(he,6e4-Date.now()%6e4).unref()}))),le&&(++e,x.stat(le,((t,s)=>{if(t&&!t.message.startsWith("ENOENT:"))throw t;s&&s.dev===me.dev&&s.ino===me.ino||(de.end(),de=x.createWriteStream(null,{fd:x.openSync(le,"a")}),me=x.fstatSync(de.fd)),0==--e&&setTimeout(he,6e4-Date.now()%6e4).unref()}))),0==--e&&setTimeout(he,6e4-Date.now()%6e4).unref()}function ge(e){if(e.sessionContext){const t=e.sessionContext;e.deviceId=t.deviceId,e.remoteAddress=ne(t.httpRequest).remoteAddress,delete e.sessionContext}if(e.exception){const t=e.exception;e.exceptionName=t.name,e.exceptionMessage=t.message,e.exceptionStack=t.stack,delete e.exception}if(e.task&&(e.taskId=e.task._id,delete e.task),e.rpc){const t=e.rpc;t.acsRequest?(e.acsRequestId=t.id,e.acsRequestName=t.acsRequest.name,t.acsRequest.commandKey&&(e.acsRequestCommandKey=t.acsRequest.commandKey)):t.cpeRequest?(e.cpeRequestId=t.id,"Inform"===t.cpeRequest.name?(e.informEvent=t.cpeRequest.event.join(","),e.informRetryCount=t.cpeRequest.retryCount):(e.cpeRequestName=t.cpeRequest.name,t.cpeRequest.commandKey&&(e.cpeRequestCommandKey=t.cpeRequest.commandKey))):t.cpeFault&&(e.acsRequestId=t.id,e.cpeFaultCode=t.cpeFault.detail.faultCode,e.cpeFaultString=t.cpeFault.detail.faultString),delete e.rpc}if(e.fault){const t=e.fault;e.faultCode=t.code,e.faultMessage=t.message,delete e.fault}e.context&&(e.remoteAddress=ne(e.context.req).remoteAddress,e.context.state.user&&(e.user=e.context.state.user.username),delete e.context);for(const[t,s]of Object.entries(e))null==s&&delete e[t];return e}function ve(e,t){if(t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${JSON.stringify(ge(e))}${O.EOL}`}return`${JSON.stringify(ge(e))}${O.EOL}`}function we(e,t){const s={user:!0,remoteAddress:!0,severity:!0,timestamp:!0,message:!0,deviceId:!!e.sessionContext};ge(e);let n="";e.remoteAddress&&(n=e.deviceId&&s.deviceId?`${e.remoteAddress} ${e.deviceId}: `:e.user?`${e.user}@${e.remoteAddress}: `:`${e.remoteAddress}: `);const a=Object.keys(e);let r="";const i=[];for(const t of a)s[t]||i.push(`${t}=${JSON.stringify(e[t])}`);if(i.length&&(r=`; ${i.join(" ")}`),t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${n}${e.message}${r}${O.EOL}`}return`${e.timestamp} [${e.severity.toUpperCase()}] ${n}${e.message}${r}${O.EOL}`}function be(e){e.timestamp=(new Date).toISOString(),"json"===ae?(e=Object.assign({},ie,e),fe.write(ve(e,ce))):fe.write(we(e,ce))}function ye(e){e.severity="info",be(e)}function Se(e){e.severity="warn",be(e)}function _e(e){e.severity="error",be(e)}function xe(e){e.timestamp=(new Date).toISOString(),"json"===re?(Object.assign(e,ie),de.write(ve(e,ue))):de.write(we(e,ue))}function Oe(e){e.severity="info",xe(e)}function Ne(e){e.severity="warn",xe(e)}function Re(e){e.severity="error",xe(e)}let De=0,Te=[];function Ae(){const e=D.default.fork();return e.on("error",(t=>{if("EPIPE"!==t.code)throw t;setTimeout((()=>{if(!e.isDead())throw t}),50)})),e}function Ce(e,t,s){const n={message:"Worker died",pid:e.process.pid,exitCode:null,signal:null};null!=t&&(n.exitCode=t),null!=s&&(n.signal=s),_e(n);const a=Date.now();Te.push(a);let r=0,i=0,o=0;if(Te=Te.filter((e=>{if(e>a-6e4)++r;else if(e>a-12e4)++i;else{if(!(e>a-18e4))return!1;++o}return!0})),r>5&&i>5&&o>5){process.exitCode=1,D.default.removeListener("exit",Ce);for(const e in D.default.workers)D.default.workers[e].kill();_e({message:"Too many crashes, exiting",pid:process.pid})}else De=Math.max(a,De+2e3),De!==a?setTimeout((()=>{process.exitCode||Ae()}),De-a):Ae()}function Ee(){D.default.removeListener("exit",Ce);for(const e in D.default.workers)D.default.workers[e].kill()}const Ie=D.default.worker;function $e(e){const t=(e=e.trim()).split(" ",1)[0],s={method:t};if("Basic"===t){const n=/^([^:]*):(.*)$/.exec(Buffer.from(e.slice(t.length+1),"base64").toString());if(!n)throw new Error("Unable to parse auth header");s.username=n[1],s.password=n[2]}else"Digest"===t&&Object.assign(s,function(e){const t={},s=e.split(",");let n;for(;null!=(n=s.shift());){const e=n.split("=",1)[0];if(e.length===n.length){if(!n.trim())continue;throw new Error("Unable to parse auth header")}let a=n.slice(e.length+1);if(/^\s*"/.test(a)){for(;!/[^\\]"\s*$/.test(a);){const e=s.shift();if(null==e)throw new Error("Unable to parse auth header");a+=","+e}try{a=JSON.parse(a)}catch(e){throw new Error("Unable to parse auth header")}}else a=a.trim();t[e.trim()]=a}return t}(e.slice(t.length+1)));return s}function Le(e){return e.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")}function ke(e){return encodeURIComponent(e).replace(/[!~*'().]/g,(e=>"%"+e.charCodeAt(0).toString(16).toUpperCase())).replace(/0x(?=[0-9A-Z]{2})/g,"0%78").replace(/%/g,"0x")}function Pe(e){return decodeURIComponent(e.replace(/0x(?=[0-9A-Z]{2})/g,"%"))}function je(e){const t=[],s=e.length;let n=0,a="",r="",i="",o=0,l=0;for(let c=0;c<s;++c){const s=e.charCodeAt(c);switch(s){case 39:case 34:if(n===s){if(n=0,a){const s={name:a,namespace:r,localName:i,value:e.slice(o+1,c)};t.push(s),a="",o=c+1}}else n=s,o=c;continue;case 58:if(n)continue;o>=l&&(l=c);continue;case 61:if(n)continue;if(a)throw new Error(`Unexpected character at ${c}`);a=e.slice(o,c).trim(),l>o?(r=e.slice(o,l).trim(),i=e.slice(l+1,c).trim()):(r="",i=a)}}if(a)throw new Error(`Attribute must have value at ${o}`);const c=e.slice(o);if(c.trim())throw new Error("Unexpected string at "+(s-c.length));return t}function Me(e){return e.replace(/&[0-9a-z#]+;/gi,(e=>{switch(e){case"&quot;":return'"';case"&amp;":return"&";case"&apos;":return"'";case"&lt;":return"<";case"&gt;":return">";default:if(e.startsWith("&#x")){const t=e.slice(3,-1).toLowerCase(),s=parseInt(t,16);if(t.endsWith(s.toString(16)))return String.fromCharCode(s)}else if(e.startsWith("&#")){const t=e.slice(2,-1),s=parseInt(t);if(t.endsWith(s.toString()))return String.fromCharCode(s)}}return e}))}function Fe(e){const t={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};return e.replace(/[&"'<>]/g,(e=>t[e]))}let qe=new Map,Ue=new Map;const Ve=new WeakMap;function Ge(e){if(null===e)return"null";if(void 0===e)return"undefined";const t=typeof e;if("number"===t||"boolean"===t||"string"===t)return`${t}:${e}`;if("function"!==t&&"object"!==t)throw new Error(`Cannot memoize ${t} arguments`);let s=Ve.get(e);if(!s){s=`${t}:${Math.trunc(Math.random()*Number.MAX_SAFE_INTEGER).toString(36)}`,Ve.set(e,s)}return s}function We(e){const t=Ge(e);return(...s)=>{const n=JSON.stringify(s.map(Ge))+t;if(qe.has(n))return qe.get(n);let a;return Ue.has(n)?qe.set(n,a=Ue.get(n)):(qe.set(n,a=e(...s)),a instanceof Promise&&a.catch((()=>{qe.delete(n),Ue.delete(n)}))),a}}const Be=setInterval((()=>{Ue=qe,qe=new Map}),12e4);Be.unref&&Be.unref();const ze="1.2.9+20240918074432";let Je=new Map,Ke=new Map;function He(e,t){return t>=e.length?0:e.charCodeAt(t)}function Xe(e){return e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57||95===e||45===e}class Ze{static parseAliasValue(e,t){let s=t;for(;32===He(e,s);)++s;if(34===He(e,s)){for(let n=s+1;n<e.length;++n)if(34===e.charCodeAt(n)&&92!==e.charCodeAt(n-1))try{++n;return{index:n,value:JSON.parse(e.slice(s,n))}}catch{return{index:t,value:null}}return{index:t,value:null}}for(;s<e.length;++s){const t=e.charCodeAt(s);if(93===t||44===t)break}return{index:s,value:e.slice(t,s).trim()}}static parseAliasPath(e,t){let s=t;for(;32===He(e,s);)++s;const{index:n,segments:a}=Ze.parsePath(e,s);if(n===s)return{index:t,path:null};for(s=n;32===He(e,s);)++s;return 58!==He(e,s)?{index:t,path:null}:{index:s+1,path:new Ze(a)}}static parseAlias(e,t){const s=[];let n=t;for(;;){let a,r;if(({index:n,path:a}=Ze.parseAliasPath(e,n)),!a)break;if(({index:n,value:r}=Ze.parseAliasValue(e,n)),null==r)break;if(s.push([a,r]),44!==He(e,t=n))break;++n}return s.sort(((e,t)=>e[0].toString()>t[0].toString()?1:e[0].toString()<t[0].toString()?-1:e[1]>t[1]?1:e[1]<t[1]?-1:0)),Object.freeze(s),{index:t,alias:s}}static parsePath(e,t){const s=[];let n=t,a=-1;for(let r=t;r<=e.length;++r){const i=He(e,r);if(91===i&&r===n){const{index:a,alias:i}=Ze.parseAlias(e,r+1);if(93!==He(e,a))break;s.push(i),t=r=a+1,n=r+1}else if(42===i&&r===n)a=r+1;else if(!Xe(i)||r===a){if(r===n)break;const a=e.slice(n,r);if(s.push(a),t=r,46!==i)break;n=r+1}}return Object.freeze(s),{index:t,segments:s}}constructor(e){let t=0,s=0;const n=e.map(((e,n)=>{if(Array.isArray(e)){t|=1<<n;return`[${e.map((e=>`${e[0].toString()}:${JSON.stringify(e[1])}`)).join(",")}]`}return"*"===e&&(s|=1<<n),e}));let a=0;const r=n.map(((e,t)=>(a+=e.length)+t));this.segments=e,this.wildcard=s,this.alias=t,this._string=n.join("."),this._stringIndex=r}static parse(e){let t=Je.get(e);if(!t){if(t=Ke.get(e),!t){const{index:s,segments:n}=Ze.parsePath(e,0);if(s<e.length)throw new Error("Invalid parameter path");t=new Ze(n),t.toString()!==e&&Je.set(t.toString(),t)}Je.set(e,t)}return t}get length(){return this.segments.length}toString(){return this._string}slice(e=0,t=this.segments.length){let s;if(e<0&&(e=Math.max(0,this.segments.length+e)),t<0&&(t=Math.max(0,this.segments.length+t)),e>=t)s="";else{const n=e>0?this._stringIndex[e-1]+1:0,a=t<=this.segments.length?this._stringIndex[t-1]:this._string.length;s=this._string.slice(n,a)}let n=Je.get(s);if(!n){if(n=Ke.get(s),!n){const s=this.segments.slice(e,t);Object.freeze(s),n=new Ze(s)}Je.set(s,n)}return n}concat(e){if(!e._string)return this;if(!this._string)return e;const t=`${this._string}.${e._string}`;let s=Je.get(t);if(!s){if(s=Ke.get(t),!s){const t=this.segments.concat(e.segments);Object.freeze(t),s=new Ze(t)}Je.set(t,s)}return s}stripAlias(){if(!this.alias)return this;const e=this.segments.map((e=>Array.isArray(e)?"*":e)),t=e.join(".");let s=Je.get(t);return s||(s=Ke.get(t),s||(Object.freeze(e),s=new Ze(e)),Je.set(t,s)),s}}const Ye=setInterval((()=>{Ke=Je,Je=new Map}),12e4);Ye.unref&&Ye.unref();const Qe=`GenieACS/${ze}`,et={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-0"},tt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-1"},st={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},nt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},at={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-3"};let rt;const it=We(je);function ot(e){return"true"===e||"1"===e||"false"!==e&&"0"!==e&&null}function lt(e){return e.children.filter((e=>"EventStruct"===e.localName)).map((e=>e.children.find((e=>"EventCode"===e.localName)).text))}function ct(e){return e.children.map((e=>{if("ParameterInfoStruct"!==e.localName)return null;let t,s;for(const n of e.children)switch(n.localName){case"Name":t=n.text;break;case"Writable":s=n.text}let n=ot(s);null==n&&(rt.push({message:"Missing or invalid XML node",element:"Writable",parameter:t}),n=!1);try{return t&&!t.endsWith(".")?[Ze.parse(t),!1,n]:[Ze.parse(t.slice(0,-1)),!0,n]}catch(e){return rt.push({message:"Missing or invalid XML node",element:"Name",parameter:t}),null}})).filter((e=>null!=e))}const ut=We((e=>{const t=je(e);for(const e of t)if("type"===e.localName)return e.value;return null}));function ft(e){return e.children.map((e=>{if("ParameterValueStruct"!==e.localName)return null;let t,s;for(const n of e.children)switch(n.localName){case"Name":s=n.text;break;case"Value":t=n}let n=ut(t.attrs);n||(rt.push({message:"Missing or invalid XML node",attribute:"type",parameter:s}),n="xsd:string");const a=Me(t.text);let r=a;"xsd:boolean"===n?(r=ot(a),null==r&&(rt.push({message:"Missing or invalid XML node",element:"Value",parameter:s}),r=a)):"xsd:int"===n||"xsd:unsignedInt"===n?(r=parseInt(a),isNaN(r)&&(rt.push({message:"Missing or invalid XML node",element:"Value",parameter:s}),r=a)):"xsd:dateTime"===n&&(r=Date.parse(a),isNaN(r)&&(rt.push({message:"Missing or invalid XML node",element:"Value",parameter:s}),r=a));try{return[Ze.parse(s),r,n]}catch(e){return rt.push({message:"Missing or invalid XML node",element:"Name",parameter:s}),null}})).filter((e=>null!=e))}function pt(e){return e.children.map((e=>{if("ParameterAttributeStruct"!==e.localName)return null;let t,s,n;for(const a of e.children)switch(a.localName){case"Name":n=a.text;break;case"Notification":t=a;break;case"AccessList":s=a}let a=parseInt(t.text);isNaN(a)&&(rt.push({message:"Missing or invalid XML node",element:"Notification",parameter:n}),a=0);const r=s.children.filter((e=>"string"===e.localName)).map((e=>Me(e.text)));try{return[Ze.parse(n),a,r]}catch(e){return rt.push({message:"Missing or invalid XML node",element:"Name",parameter:n}),null}})).filter((e=>null!=e))}function dt(e){let t,s,n,a,r,i;for(const o of e.children)switch(o.localName){case"FaultCode":t=o.text;break;case"FaultString":s=Me(o.text);break;case"SetParameterValuesFault":n=n||[],a=r=i=null;for(const e of o.children)switch(e.localName){case"ParameterName":a=e.text;break;case"FaultCode":r=e.text;break;case"FaultString":i=Me(e.text)}n.push({parameterName:a,faultCode:r,faultString:i})}return null==t&&(rt.push({message:"Missing or invalid XML node",element:"FaultCode"}),t=""),null==s&&(rt.push({message:"Missing or invalid XML node",element:"FaultString"}),s=""),{faultCode:t,faultString:s,setParameterValuesFault:n}}function mt(e,t){rt=t;const s={id:null,cwmpVersion:null,sessionTimeout:null,cpeRequest:null,cpeFault:null,cpeResponse:null,unknownMethod:null};if(!e.length)return s;const n=function(e){const t=e.length;let s=0,n=0,a=0,r=0;const i={name:"root",namespace:"",localName:"root",attrs:"",text:"",bodyIndex:0,children:[]},o=[i];for(let i=0;i<t;++i)switch(e.charCodeAt(i)){case 39:switch(255&s){case 2:s=a,n=r,a=0;continue;case 1:a=s,r=n,s=2,n=i;continue}continue;case 34:switch(255&s){case 3:s=a,n=r,a=0;continue;case 1:a=s,r=n,s=3,n=i;continue}continue;case 60:0==(255&s)&&(a=s,r=n,s=1,n=i);continue;case 58:1==(255&s)&&0==(s>>8&255)&&(s^=(i-n&255)<<8);continue;case 32:case 9:case 13:case 10:1==(255&s)&&0==(s>>16&255)&&(s^=(i-n&255)<<16);continue;case 62:if(1==(255&s)){const t=s>>16&255;let l,c,u,f,p,d,m;switch(e.charCodeAt(n+1)){case 47:if(u=o.pop(),l=0===t?e.slice(n+2,i):e.slice(n+2,n+t),u.name!==l)throw new Error(`Unmatched closing tag at ${i}`);u.children.length||(u.text=e.slice(u.bodyIndex,n)),s=a,n=r,a=0;continue;case 33:if(e.startsWith("![CDATA[",n+1)){if(e.endsWith("]]",i))throw new Error(`CDATA nodes are not supported at ${i}`)}else e.startsWith("!--",n+1)&&e.endsWith("--",i)&&(s=a,n=r,a=0);continue;case 63:63===e.charCodeAt(i-1)&&(s=a,n=r,a=0);continue;default:p=+(47===e.charCodeAt(i-1)),f=o[o.length-1],c=s>>8&255,l=0===t?e.slice(n+1,i-p):e.slice(n+1,n+t),c&&(!t||c<t)?(d=l.slice(c),m=l.slice(0,c-1)):(d=l,m=""),u={name:l,namespace:m,localName:d,attrs:t?e.slice(n+t+1,i-p):"",text:"",bodyIndex:i+1,children:[]},f.children.push(u),p||o.push(u),s=a,n=r,a=0;continue}}continue}if(s)throw new Error(`Unclosed token at ${n}`);if(o.length>1){const e=o[o.length-1];throw new Error(`Unclosed XML element at ${e.bodyIndex}`)}return i.children.length||(i.text=e),i}(e);if(!n.children.length)return s;const a=n.children[0];let r,i;for(const e of a.children)switch(e.localName){case"Header":r=e;break;case"Body":i=e}if(r)for(const e of r.children)switch(e.localName){case"ID":s.id=Me(e.text);break;case"sessionTimeout":s.sessionTimeout=parseInt(e.text)}const o=i.children[0];if("Inform"===o.localName){let e,t;for(const s of[o,i,a])if(e=e||s.namespace,s.attrs){const n=it(s.attrs),a=e?n.find((t=>"xmlns"===t.namespace&&t.localName===e)):n.find((e=>"xmlns"===e.name));a&&(t=a.value)}switch(t){case"urn:dslforum-org:cwmp-1-0":s.cwmpVersion="1.0";break;case"urn:dslforum-org:cwmp-1-1":s.cwmpVersion="1.1";break;case"urn:dslforum-org:cwmp-1-2":s.sessionTimeout?s.cwmpVersion="1.3":s.cwmpVersion="1.2";break;case"urn:dslforum-org:cwmp-1-3":s.cwmpVersion="1.4";break;default:throw new Error("Unrecognized CWMP version")}}switch(o.localName){case"Inform":s.cpeRequest=function(e){let t,s,n;const a={Manufacturer:null,OUI:null,ProductClass:null,SerialNumber:null};for(const r of e.children)switch(r.localName){case"ParameterList":n=ft(r);break;case"DeviceId":for(const e of r.children){const t=e.localName;t in a&&(a[t]=Me(e.text))}break;case"Event":s=lt(r);break;case"RetryCount":t=parseInt(r.text)}if(!a||!a.SerialNumber||!a.OUI)throw new Error("Missing or invalid DeviceId element");return n||(rt.push({message:"Missing or invalid XML node",element:"ParameterList"}),n=[]),s||(rt.push({message:"Missing or invalid XML node",element:"Event"}),s=[]),(null==t||isNaN(t))&&(rt.push({message:"Missing or invalid XML node",element:"RetryCount"}),t=0),{name:"Inform",parameterList:n,deviceId:a,event:s,retryCount:t}}(o);break;case"GetRPCMethods":s.cpeRequest={name:"GetRPCMethods"};break;case"TransferComplete":s.cpeRequest=function(e){let t,s,n,a;for(const r of e.children)switch(r.localName){case"CommandKey":t=r.text;break;case"FaultStruct":s=dt(r);break;case"StartTime":n=Date.parse(r.text);break;case"CompleteTime":a=Date.parse(r.text)}return null==t&&(rt.push({message:"Missing or invalid XML node",element:"CommandKey"}),t=""),s||(rt.push({message:"Missing or invalid XML node",element:"FaultStruct"}),s={faultCode:"0",faultString:""}),(null==n||isNaN(n))&&(rt.push({message:"Missing or invalid XML node",element:"StartTime"}),n=Date.parse("0001-01-01T00:00:00Z")),(null==a||isNaN(a))&&(rt.push({message:"Missing or invalid XML node",element:"CompleteTime"}),a=Date.parse("0001-01-01T00:00:00Z")),{name:"TransferComplete",commandKey:t,faultStruct:s,startTime:n,completeTime:a}}(o);break;case"RequestDownload":s.cpeRequest=function(e){return{name:"RequestDownload",fileType:e.children.find((e=>"FileType"===e.localName)).text}}(o);break;case"GetParameterNamesResponse":s.cpeResponse=function(e){return{name:"GetParameterNamesResponse",parameterList:ct(e.children.find((e=>"ParameterList"===e.localName)))}}(o);break;case"GetParameterValuesResponse":s.cpeResponse=function(e){return{name:"GetParameterValuesResponse",parameterList:ft(e.children.find((e=>"ParameterList"===e.localName)))}}(o);break;case"GetParameterAttributesResponse":s.cpeResponse=function(e){return{name:"GetParameterAttributesResponse",parameterList:pt(e.children.find((e=>"ParameterList"===e.localName)))}}(o);break;case"SetParameterValuesResponse":s.cpeResponse=function(e){let t;for(const s of e.children)"Status"===s.localName&&(t=parseInt(s.text));return t>=0||(rt.push({message:"Missing or invalid XML node",element:"Status"}),t=0),{name:"SetParameterValuesResponse",status:t}}(o);break;case"SetParameterAttributesResponse":s.cpeResponse={name:"SetParameterAttributesResponse"};break;case"AddObjectResponse":s.cpeResponse=function(e){let t,s;for(const n of e.children)switch(n.localName){case"InstanceNumber":t=n.text;break;case"Status":s=parseInt(n.text)}if(!/^[0-9]+$/.test(t))throw new Error("Missing or invalid instance number");return s>=0||(rt.push({message:"Missing or invalid XML node",element:"Status"}),s=0),{name:"AddObjectResponse",instanceNumber:t,status:s}}(o);break;case"DeleteObjectResponse":s.cpeResponse=function(e){let t;for(const s of e.children)"Status"===s.localName&&(t=parseInt(s.text));return t>=0||(rt.push({message:"Missing or invalid XML node",element:"Status"}),t=0),{name:"DeleteObjectResponse",status:t}}(o);break;case"RebootResponse":s.cpeResponse={name:"RebootResponse"};break;case"FactoryResetResponse":s.cpeResponse={name:"FactoryResetResponse"};break;case"DownloadResponse":s.cpeResponse=function(e){let t,s,n;for(const a of e.children)switch(a.localName){case"Status":t=parseInt(a.text);break;case"StartTime":s=Date.parse(a.text);break;case"CompleteTime":n=Date.parse(a.text)}return t>=0||(rt.push({message:"Missing or invalid XML node",element:"Status"}),t=0),(null==s||isNaN(s))&&(rt.push({message:"Missing or invalid XML node",element:"StartTime"}),s=Date.parse("0001-01-01T00:00:00Z")),(null==n||isNaN(n))&&(rt.push({message:"Missing or invalid XML node",element:"CompleteTime"}),n=Date.parse("0001-01-01T00:00:00Z")),{name:"DownloadResponse",status:t,startTime:s,completeTime:n}}(o);break;case"Fault":s.cpeFault=function(e){let t,s,n;for(const a of e.children)switch(a.localName){case"faultcode":t=a.text;break;case"faultstring":s=Me(a.text);break;case"detail":n=dt(a.children.find((e=>"Fault"===e.localName)))}if(!n)throw new Error("Missing detail element");return null==t&&(rt.push({message:"Missing or invalid XML node",element:"faultcode"}),t="Client"),null==s&&(rt.push({message:"Missing or invalid XML node",element:"faultstring"}),s="CWMP fault"),{faultCode:t,faultString:s,detail:n}}(o);break;default:s.unknownMethod=o.localName}return s}const ht={"1.0":Object.entries(et).map((([e,t])=>`xmlns:${e}="${t}"`)).join(" "),1.1:Object.entries(tt).map((([e,t])=>`xmlns:${e}="${t}"`)).join(" "),1.2:Object.entries(st).map((([e,t])=>`xmlns:${e}="${t}"`)).join(" "),1.3:Object.entries(nt).map((([e,t])=>`xmlns:${e}="${t}"`)).join(" "),1.4:Object.entries(at).map((([e,t])=>`xmlns:${e}="${t}"`)).join(" ")};function gt(e){const t={Server:Qe,SOAPServer:Qe};if(!e)return{code:204,headers:t,data:""};let s;if(e.acsResponse)switch(e.acsResponse.name){case"InformResponse":s="<cwmp:InformResponse><MaxEnvelopes>1</MaxEnvelopes></cwmp:InformResponse>";break;case"GetRPCMethodsResponse":s=`<cwmp:GetRPCMethodsResponse><MethodList soap-enc:arrayType="xsd:string[${(r=e.acsResponse).methodList.length}]">${r.methodList.map((e=>`<string>${e}</string>`)).join("")}</MethodList></cwmp:GetRPCMethodsResponse>`;break;case"TransferCompleteResponse":s="<cwmp:TransferCompleteResponse></cwmp:TransferCompleteResponse>";break;case"RequestDownloadResponse":s="<cwmp:RequestDownloadResponse></cwmp:RequestDownloadResponse>";break;default:throw new Error(`Unknown method response type ${e.acsResponse.name}`)}else if(e.acsRequest)switch(e.acsRequest.name){case"GetParameterNames":s=`<cwmp:GetParameterNames><ParameterPath>${(a=e.acsRequest).parameterPath}</ParameterPath><NextLevel>${+a.nextLevel}</NextLevel></cwmp:GetParameterNames>`;break;case"GetParameterValues":s=function(e){return`<cwmp:GetParameterValues><ParameterNames soap-enc:arrayType="xsd:string[${e.parameterNames.length}]">${e.parameterNames.map((e=>`<string>${e}</string>`)).join("")}</ParameterNames></cwmp:GetParameterValues>`}(e.acsRequest);break;case"GetParameterAttributes":s=function(e){return`<cwmp:GetParameterAttributes><ParameterNames soap-enc:arrayType="xsd:string[${e.parameterNames.length}]">${e.parameterNames.map((e=>`<string>${e}</string>`)).join("")}</ParameterNames></cwmp:GetParameterAttributes>`}(e.acsRequest);break;case"SetParameterValues":s=function(e){const t=e.parameterList.map((t=>{let s=t[1];return"xsd:dateTime"===t[2]&&"number"==typeof s&&(s=new Date(s).toISOString(),!1===e.DATETIME_MILLISECONDS&&(s=s.replace(".000",""))),"xsd:boolean"===t[2]&&"boolean"==typeof s&&!1===e.BOOLEAN_LITERAL&&(s=+s),`<ParameterValueStruct><Name>${t[0]}</Name><Value xsi:type="${t[2]}">${Fe(""+s)}</Value></ParameterValueStruct>`}));return`<cwmp:SetParameterValues><ParameterList soap-enc:arrayType="cwmp:ParameterValueStruct[${e.parameterList.length}]">${t.join("")}</ParameterList><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:SetParameterValues>`}(e.acsRequest);break;case"SetParameterAttributes":s=function(e){const t=e.parameterList.map((e=>`<SetParameterAttributesStruct><Name>${e[0]}</Name><NotificationChange>${null==e[1]?"false":"true"}</NotificationChange><Notification>${null==e[1]?"":e[1]}</Notification><AccessListChange>${null==e[2]?"false":"true"}</AccessListChange><AccessList soap-enc:arrayType="xsd:string[${(e[2]||[]).length}]">${null==e[2]?"":e[2].map((e=>`<string>${Fe(e)}</string>`)).join("")}</AccessList></SetParameterAttributesStruct>`));return`<cwmp:SetParameterAttributes><ParameterList soap-enc:arrayType="cwmp:SetParameterAttributesStruct[${e.parameterList.length}]">${t.join("")}</ParameterList></cwmp:SetParameterAttributes>`}(e.acsRequest);break;case"AddObject":s=function(e){return`<cwmp:AddObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:AddObject>`}(e.acsRequest);break;case"DeleteObject":s=function(e){return`<cwmp:DeleteObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:DeleteObject>`}(e.acsRequest);break;case"Reboot":s=function(e){return`<cwmp:Reboot><CommandKey>${e.commandKey||""}</CommandKey></cwmp:Reboot>`}(e.acsRequest);break;case"FactoryReset":s="<cwmp:FactoryReset></cwmp:FactoryReset>";break;case"Download":s=function(e){return`<cwmp:Download><CommandKey>${e.commandKey||""}</CommandKey><FileType>${e.fileType}</FileType><URL>${e.url}</URL><Username>${Fe(e.username||"")}</Username><Password>${Fe(e.password||"")}</Password><FileSize>${e.fileSize||"0"}</FileSize><TargetFileName>${Fe(e.targetFileName||"")}</TargetFileName><DelaySeconds>${e.delaySeconds||"0"}</DelaySeconds><SuccessURL>${Fe(e.successUrl||"")}</SuccessURL><FailureURL>${Fe(e.failureUrl||"")}</FailureURL></cwmp:Download>`}(e.acsRequest);break;default:throw new Error(`Unknown method request ${e.acsRequest.name}`)}else e.acsFault&&(s=`<soap-env:Body:Fault><faultcode>${Fe((n=e.acsFault).faultCode)}</faultcode><faultstring>${Fe(n.faultString)}</faultstring><detail><cwmp:Fault><FaultCode>${Fe(n.detail.faultCode)}</FaultCode><FaultString>${Fe(n.detail.faultString)}</FaultString></cwmp:Fault></detail></soap-env:Body:Fault>`);var n,a,r;return t["Content-Type"]='text/xml; charset="utf-8"',{code:200,headers:t,data:`<?xml version="1.0" encoding="UTF-8"?>\n<soap-env:Envelope ${ht[e.cwmpVersion]}><soap-env:Header><cwmp:ID soap-env:mustUnderstand="1">${e.id}</cwmp:ID></soap-env:Header><soap-env:Body>${s}</soap-env:Body></soap-env:Envelope>`}}const vt={object:2,writable:4,value:8,notification:16,accessList:32};function wt(e){if(null!=e[0])switch(e[1]){case"xsd:boolean":if("boolean"!=typeof e[0]){const s="true"==(t=""+(t=e[0]))||"TRUE"===t||"True"===t||"1"===t||"false"!==t&&"FALSE"!==t&&"False"!==t&&"0"!==t&&null;e[0]=null==s?""+e[0]:s}break;case"xsd:int":case"xsd:unsignedInt":if("number"!=typeof e[0]){const t=parseInt(e[0]);isNaN(t)?e[0]=""+e[0]:e[0]=t}break;case"xsd:dateTime":if("number"!=typeof e[0]){let t=+e[0];isNaN(t)?(t=Date.parse(e[0]),isNaN(t)?e[0]=""+e[0]:e[0]=t):e[0]=t}break;default:e[0]=""+e[0]}var t;return e}function bt(e,t,s=null){const n=e.stripAlias();let a=[{path:n,pathGet:t,pathSet:null,attrGet:s,attrSet:null,defer:!0}];if(e.alias)for(const[s,r]of e.segments.entries())if(Array.isArray(r)){const e=n.slice(0,s+1);for(const[s]of r)a=a.concat(bt(e.concat(s),t,{value:t}))}return a}function yt(e,t,s){let n=[];if(t.alias){const a=t.stripAlias();for(const t of e.paths.find(a,!1,!0))e.attributes.has(t,s)&&n.push(t);for(let r=t.length-1;r>=0;--r)if(t.alias&1<<r)for(const[i,o]of t.segments[r]){const t=yt(e,a.slice(0,r+1).concat(i),s),l=[];for(const a of t){const t=e.attributes.get(a,s);if(t&&t.value&&t.value[1]&&wt([o,t.value[1][1]])[0]===t.value[1][0])for(let e=0;e<n.length;++e){let t;const s=n[e];if(s){for(t=r;t>=0&&s.segments[t]===a.segments[t];--t);t<0&&(l.push(s),n[e]=null)}}}n=l}}else for(const a of e.paths.find(t,!1,!0))e.attributes.has(a,s)&&n.push(a);return n.sort(((e,t)=>{for(let s=0;s<e.length;++s){const n=e.segments[s],a=t.segments[s];if(n!==a){const e=parseInt(n),t=parseInt(a);return e===+n&&t===+a?e-t:n<a?-1:1}}return 0})),n}function St(e,t,s,n,a=0){const r={};let i=s=s||0;(null==n?void 0:n.object)&&(n.object>i&&(i=n.object),n.object<=n.value||(n.value=n.object));for(const o of e.paths.find(t,!0,!0,i?99:t.length)){const l=e.trackers.get(o);for(const e in l)r[e]|=l[e];const c=e.timestamps.get(o);if(void 0!==c)if(s>c||i>c&&o.length>t.length)e.timestamps.delete(o),e.attributes.delete(o),a|=1;else if(n&&o.length===t.length){const t=e.attributes.get(o);if(t){let s;for(const r in n)r in t&&n[r]>t[r][0]&&(a|=vt[r],s||(s=Object.assign({},t),e.attributes.set(o,s)),delete s[r])}}}for(const t in r)r[t]&a&&e.changes.add(t)}function _t(e,t){const s=typeof e;return null==e||"number"===s||"boolean"===s||"string"===s||"symbol"===s?e===t:JSON.stringify(e)===JSON.stringify(t)}function xt(e,t,s,n,a){t=e.paths.add(t);const r=e.timestamps.get(t);let i;t.wildcard?n=void 0:r&&(i=e.attributes.get(t));let o=0;if(n){n.value&&n.value[1]&&n.value[0]>=(n.object?n.object[0]:0)&&(n.object=[n.value[0],0]),n.object&&n.object[1]&&n.object[0]>=(n.value?n.value[0]:0)&&(n.value=[n.object[0],null]);const l=Object.assign({},i,n);if(i)for(const e in n)s=Math.max(s,n[e][0]),e in i?n[e][0]<=i[e][0]?l[e]=i[e]:_t(n[e][1],i[e][1])||(o|=vt[e]):o|=vt[e];else o|=1;e.attributes.set(t,l),s<=r||(e.timestamps.set(t,s),t.length>1&&(a=xt(e,t.slice(0,t.length-1),s,{object:[s,1]},a)))}else if(!(s<=r))if(e.timestamps.set(t,s),i)e.attributes.delete(t),o|=1;else if(t.wildcard)for(const n of e.paths.find(t,!1,!0,t.length))s>e.timestamps.get(n)&&(a=a||[]).push([n,s]);if(o)if(1&o)(a=a||[]).push([t,s,null,o]);else if(o&vt.object)(a=a||[]).push([t,0,{object:n.object[0]},o]);else for(const s of e.paths.find(t,!0,!1,t.length)){const t=e.trackers.get(s);for(const s in t)t[s]&o&&e.changes.add(s)}return a}function Ot(e,t,s,n){t=e.paths.add(t);let a=1;if(n)for(const e of n)a|=vt[e];let r=e.trackers.get(t);r||(r={},e.trackers.set(t,r)),r[s]|=a}const Nt=+J("EXT_TIMEOUT"),Rt={},Dt=new Map;function Tt(e){return new Promise((t=>{const s=e[0],n=A.randomBytes(8).toString("hex");if(Dt.set(n,t),!Rt[s]){const e=f.spawn(U+"/bin/genieacs-ext",[s],{stdio:["ignore","pipe","pipe","ipc"]});Rt[s]=e,e.on("error",(a=>{Rt[s]===e&&(Dt.delete(n)&&t({fault:{code:a.name,message:a.message},value:null}),At(Rt[s]),delete Rt[s])})),e.on("disconnect",(()=>{Rt[s]===e&&delete Rt[s]})),e.on("message",(e=>{const t=Dt.get(e[0]);t&&(Dt.delete(e[0]),setTimeout((()=>{t({fault:e[1],value:e[2]})})))}));I.default.createInterface(e.stdout).on("line",(t=>{ye({message:`Ext ${s}(${e.pid}): ${t}`})}));I.default.createInterface(e.stderr).on("line",(t=>{Se({message:`Ext ${s}(${e.pid}): ${t}`})}))}return setTimeout((()=>{Dt.delete(n)&&t({fault:{code:"timeout",message:"Extension timed out"},value:null})}),Nt),!!Rt[s].connected&&Rt[s].send([n,e.slice(1)])}))}function At(e){return new Promise((t=>{const s=Date.now()+5e3;e.kill();const n=setInterval((()=>{e.connected?Date.now()>s&&(e.kill("SIGKILL"),clearInterval(n),t()):(clearInterval(n),t())}),100)}))}async function Ct(){await Promise.all(Object.entries(Rt).map((([e,t])=>(delete Rt[e],At(t)))))}function Et(e,t){return(function(e){const t=A.createHash("md5").update(e).digest();return t.readUInt32LE(0)^t.readUInt32LE(4)^t.readUInt32LE(8)^t.readUInt32LE(12)}(e)>>>0)%t}function It(e,t,s=0){return Math.trunc((e+s)/t)*t-s}function $t(e){const t=e.trim().split(/\s+/);return 5===t.length&&t.unshift("*"),$.schedule($.parse.cron(t.join(" "),!0))}function Lt(e,t,s=0){const n=[0,0],a=t.prev(1,new Date(e+s));a&&(n[0]=a.setMilliseconds(0)-s);const r=t.next(1,new Date(e+s+1e3));return r&&(n[1]=r.setMilliseconds(0)-s),n}const kt=Symbol(),Pt=Symbol(),jt=C.createContext();let Mt;const Ft=new WeakMap;function qt(){return Mt.rng||(Mt.rng=E.default(Mt.sessionContext.deviceId)),Mt.rng()}qt.seed=function(e){Mt.rng=E.default(e)};class Ut{constructor(e,t,s,n){for(const a of t)Object.defineProperty(this,a,{get:function(){if(Mt.uncommitted&&Vt(),Mt.revision!==n&&(n=Mt.revision,s=yt(Mt.sessionContext.deviceData,e,Mt.revision)),!s.length)return;const t=Mt.sessionContext.deviceData.attributes.get(s[0],Mt.revision)[a];return t?t[1]:void 0}});Object.defineProperty(this,"path",{get:function(){if(Mt.uncommitted&&Vt(),Mt.revision!==n&&(n=Mt.revision,s=yt(Mt.sessionContext.deviceData,e,Mt.revision)),s.length)return s[0].toString()}}),Object.defineProperty(this,"size",{get:function(){if(Mt.uncommitted&&Vt(),Mt.revision!==n&&(n=Mt.revision,s=yt(Mt.sessionContext.deviceData,e,Mt.revision)),s.length)return s.length}}),this[Symbol.iterator]=function*(){Mt.uncommitted&&Vt(),Mt.revision!==n&&(n=Mt.revision,s=yt(Mt.sessionContext.deviceData,e,Mt.revision));for(const e of s)yield new Ut(e,t,[e],Mt.revision)}}}function Vt(){if(++Mt.revision,Mt.uncommitted=!1,Mt.revision===Mt.maxRevision+1){for(const e of Mt.declarations)e.defer=!1;throw kt}if(Mt.revision>Mt.maxRevision+1)throw new Error("Declare function should not be called from within a try/catch block")}function Gt(e){if(!e)return null;if(!e.name)return{code:"script",message:`${e}`};const t={code:`script.${e.name}`,message:e.message,detail:{name:e.name,message:e.message}};if(e.stack){t.detail.stack=e.stack;const s=t.detail.stack.match(/\s+at\s[^\s]+\s+at\s[^\s]+\s\(vm\.js.+\)/);s&&(t.detail.stack=t.detail.stack.slice(0,s.index))}return t}async function Wt(e,t,s,n,a,r=0){Mt={sessionContext:s,revision:n,maxRevision:a,uncommitted:!1,declarations:[],extensions:{},clear:[],rng:null,extCounter:r};for(const e of Object.keys(jt))delete jt[e];let i,o;Object.assign(jt,t);try{i=e.runInContext(jt,{displayErrors:!1}),o=0}catch(e){if(e===kt)o=1;else{if(e!==Pt)return{fault:Gt(e),clear:null,declare:null,done:!1,returnValue:null};o=2}}const l=Mt;let c;return await Promise.all(Object.entries(l.extensions).map((async([e,t])=>{c=await function(e,t,s){let n=Ft.get(e);n||(n=new Map,Ft.set(e,n));let a=n.get(t);return null==a&&n.set(t,a=new Promise(((a,r)=>{Tt(s).then((({fault:s,value:r})=>{n.delete(t),s||(e.extensionsCache[t]=r),a(s)})).catch(r)}))),a}(l.sessionContext,e,t)||c}))),c?{fault:c,clear:null,declare:null,done:!1,returnValue:null}:2===o?Wt(e,t,s,n,a,r-l.extCounter):{fault:null,clear:l.clear,declare:l.declarations,done:0===o,returnValue:i}}function Bt(e){const t={b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};return e.replace(/\\(u[0-9a-fA-F]{4}|[^u])/g,((e,s)=>{const n=s.charAt(0),a=s.slice(1);return"u"===n?String.fromCharCode(parseInt(a,16)):t.hasOwnProperty(n)?t[n]:n}))}function zt(e,t){if(!Array.isArray(e))return t(e);let s;for(let n=1;n<e.length;++n){const a=zt(e[n],t);a!==e[n]&&(s=s||e.slice(),s[n]=a)}return t(s||e)}async function Jt(e,t){if(!Array.isArray(e))return t(e);let s;for(let n=1;n<e.length;++n){const a=await Jt(e[n],t);a!==e[n]&&(s=s||e.slice(),s[n]=a)}return t(s||e)}function Kt(e,t){return L.default.seqMap(t,L.default.seq(e,t).many(),((e,t)=>t.reduce(((e,t)=>{const[s,n]=t;return Array.isArray(e)&&s===e[0]?e.concat([n]):[s,e,n]}),e)))}Object.defineProperty(jt,"Date",{value:class{constructor(...e){return e.length?new Date(...e):new Date(Mt.sessionContext.timestamp)}static now(e,t){let s=Mt.sessionContext.timestamp;if("number"==typeof e){null==t&&(t=e);let n=0;t&&(n=Et(Mt.sessionContext.deviceId,t)),s=It(s,e,n)}else if("string"==typeof e){let n=0;t&&(n=Et(Mt.sessionContext.deviceId,t));s=Lt(s,$t(e),n)[0]}else if(e)throw new Error("Invalid Date.now() argument");return s}static parse(e){return Date.parse(e)}static UTC(...e){return Date.UTC(...e)}}}),Object.defineProperty(jt,"declare",{value:function(e,t,s){Mt.uncommitted=!0,t||(t={}),s||(s={});const n=Ze.parse(e),a={path:n,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0},r=new Set;for(const[e,t]of Object.entries(s))"path"===e?a.pathSet=t:(r.add(e),a.attrGet||(a.attrGet={}),a.attrSet||(a.attrSet={}),a.attrGet[e]=1,"value"!==e||Array.isArray(s.value)?a.attrSet[e]=s[e]:a.attrSet.value=[s.value]);for(const[e,s]of Object.entries(t))s>=1&&("path"===e?a.pathGet=s:(r.add(e),a.attrGet||(a.attrGet={}),a.attrGet[e]=s));return Mt.declarations.push(a),new Ut(n,r)}}),Object.defineProperty(jt,"clear",{value:function(e,t,s){Mt.uncommitted=!0,Mt.revision===Mt.maxRevision&&Mt.clear.push([Ze.parse(e),t,s])}}),Object.defineProperty(jt,"commit",{value:Vt}),Object.defineProperty(jt,"ext",{value:function(...e){++Mt.extCounter;const t=e.map(String),s=`${Mt.revision}: ${JSON.stringify(t)}`;if(s in Mt.sessionContext.extensionsCache)return Mt.sessionContext.extensionsCache[s];throw Mt.extensions[s]=t,Pt}}),Object.defineProperty(jt,"log",{value:function(e,t){if(Mt.revision===Mt.maxRevision&&Mt.extCounter>=0){const s=Object.assign({},t,{sessionContext:Mt.sessionContext,message:`Script: ${e}`});delete s.hostname,delete s.pid,delete s.name,delete s.version,delete s.deviceId,delete s.remoteAddress,Oe(s)}}}),jt.random=qt,C.runInContext("Math.random = random;",jt),delete jt.random;const Ht=L.default.createLanguage({ComparisonOperator:function(){return L.default.alt(L.default.string(">="),L.default.string("<>"),L.default.string("<="),L.default.string("="),L.default.string(">"),L.default.string("<")).skip(L.default.optWhitespace)},LikeOperator:function(){return L.default.alt(L.default.regexp(/like/i).result("LIKE").desc("LIKE"),L.default.regexp(/not\s+like/i).result("NOT LIKE").desc("NOT LIKE")).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace)},IsNullOperator:function(){return L.default.alt(L.default.regexp(/is\s+null/i).result("IS NULL").desc("IS NULL"),L.default.regexp(/is\s+not\s+null/i).result("IS NOT NULL").desc("IS NOT NULL")).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace)},NotOperator:function(){return L.default.regexp(/not/i).result("NOT").notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("NOT")},AndOperator:function(){return L.default.regexp(/and/i).result("AND").notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("AND")},OrOperator:function(){return L.default.regexp(/or/i).result("OR").notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("OR")},Parameter:function(e){return L.default.alt(L.default.regexp(/[a-zA-Z0-9_.*-]+/),e.Expression.wrap(L.default.string("{").skip(L.default.optWhitespace),L.default.string("}"))).atLeast(1).map((e=>["PARAM",e.length>1?["||"].concat(e):e[0]])).skip(L.default.optWhitespace).desc("parameter")},StringValueSql:function(){return L.default.regexp(/'([^']*)'/,1).atLeast(1).skip(L.default.optWhitespace).map((e=>e.join("'"))).desc("string")},StringValueJs:function(){return L.default.regexp(/"((?:\\.|.)*?)"/,1).skip(L.default.optWhitespace).map(Bt).desc("string")},NumberValue:function(){return L.default.regexp(/-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?/).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).map(Number).desc("number")},BooleanValue:function(){return L.default.alt(L.default.regexp(/true/i).result(!0).desc("TRUE"),L.default.regexp(/false/i).result(!1).desc("FALSE")).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace)},NullValue:function(){return L.default.regexp(/null/i).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).result(null).desc("NULL")},FuncValue:function(e){return L.default.seqMap(L.default.regexp(/([a-zA-Z0-9_]+)/,1).skip(L.default.optWhitespace).desc("function"),e.ExpressionList.wrap(L.default.string("(").skip(L.default.optWhitespace),L.default.string(")").skip(L.default.optWhitespace)),((e,t)=>["FUNC",e.toUpperCase()].concat(t)))},WhenPair:function(e){return L.default.seq(L.default.regexp(/when/i).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("WHEN").then(e.Expression),L.default.regexp(/then/i).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("THEN").then(e.Expression))},CaseStatement:function(e){return L.default.seqMap(L.default.regexp(/case/i).result("CASE").notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("CASE"),e.WhenPair.many(),L.default.regexp(/else/i).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/)).skip(L.default.optWhitespace).desc("ELSE").then(e.Expression).map((e=>[[!0,e]])).fallback(null).skip(L.default.regex(/end/i).notFollowedBy(L.default.regexp(/[a-zA-Z0-9_]/))).skip(L.default.optWhitespace),((...e)=>e.flat(2)))},Value:function(e){return L.default.alt(e.NullValue,e.BooleanValue,e.NumberValue,e.StringValueSql,e.StringValueJs,e.FuncValue,e.CaseStatement)},ValueExpression:function(e){return Kt(L.default.string("||").skip(L.default.optWhitespace),Kt(L.default.alt(L.default.string("+"),L.default.string("-")).skip(L.default.optWhitespace),Kt(L.default.alt(L.default.string("*"),L.default.string("/"),L.default.string("%")).skip(L.default.optWhitespace),L.default.alt(e.Value,e.Parameter,e.Expression.wrap(L.default.string("(").skip(L.default.optWhitespace),L.default.string(")").skip(L.default.optWhitespace))))))},Comparison:function(e){return L.default.alt(L.default.seqMap(e.ValueExpression,e.IsNullOperator,((e,t)=>[t,e])),L.default.seqMap(e.ValueExpression,e.ComparisonOperator,e.ValueExpression,((e,t,s)=>[t,e,s])),L.default.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression.skip(L.default.regexp(/escape/i).result("ESCAPE").skip(L.default.whitespace).desc("ESCAPE")),e.ValueExpression,((e,t,s,n)=>[t,e,s,n])),L.default.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression,((e,t,s)=>[t,e,s])))},ExpressionList:function(e){return e.Expression.sepBy(L.default.string(",").skip(L.default.optWhitespace))},Expression:function(e){return Kt(e.OrOperator,Kt(e.AndOperator,(t=e.NotOperator,s=e.Comparison.or(e.ValueExpression),L.default.seq(t,s).or(s)))).trim(L.default.optWhitespace);var t,s}});function Xt(e){return e?Ht.Expression.tryParse(e):null}function Zt(e,t){const s=e.split("");for(let e=0;e<s.length;++e){const n=s[e];if(n===t)s[e]=s[e+1]||"",s[e+1]="";else if("_"===n)s[e]="\\_";else if("%"===n)for(s[e]="\\%";"%"===s[e+1];)s[++e]=""}return s.filter((e=>e))}const Yt={devices:null,presets:null,objects:null,provisions:null,virtualParameters:null,faults:null,tasks:null,files:null,operations:null,permissions:null,users:null,config:null};let Qt;function es(e,t){if(e.length!==t.length)return!1;for(const[s,n]of e.entries())if(n!==t[s])return!1;return!0}const ts=[];function ss(e){ts.push(e)}async function ns(){null!=Qt&&await(await Qt).close()}async function as(e,t,s,n){var a,r,i,o;const l={$set:{},$unset:{},$addToSet:{},$pull:{}};for(const e of t.timestamps.diff()){if(e[0].wildcard!==1<<e[0].length-1)continue;if("Events"===e[0].segments[0]||"DeviceID"===e[0].segments[0]||"Tags"===e[0].segments[0])continue;const s=t.paths.get(e[0].slice(0,-1));e[2]>n&&(e[2]=n),null==e[2]&&null!=e[1]?l.$unset[s.length?s.toString()+"._timestamp":"_timestamp"]=1:!s||s.length&&!t.attributes.has(s)||(l.$set[s.length?s.toString()+"._timestamp":"_timestamp"]=new Date(e[2]))}for(const e of t.attributes.diff()){const t=e[0],s=(((e[1]||{}).value||[])[1]||[])[0],c=(((e[2]||{}).value||[])[1]||[])[0],u=(((e[1]||{}).value||[])[1]||[])[1],f=(((e[2]||{}).value||[])[1]||[])[1],p=((e[1]||{}).value||[])[0],d=((e[2]||{}).value||[])[0],m=((e[1]||{}).object||[])[1],h=((e[2]||{}).object||[])[1],g=((e[2]||{}).writable||[])[1],v=((e[1]||{}).writable||[])[1],w=((e[1]||{}).notification||[])[0],b=((e[2]||{}).notification||[])[0],y=((e[1]||{}).notification||[])[1],S=((e[2]||{}).notification||[])[1],_=((e[1]||{}).accessList||[])[1],x=((e[2]||{}).accessList||[])[1];switch(t.segments[0]){case"Events":if(2===t.length&&c!==s)if(e[2]){const s=new Date(e[2].value[1][0]);switch(t.segments[1]){case"Inform":l.$set._lastInform=s;break;case"1_BOOT":l.$set._lastBoot=s;break;case"0_BOOTSTRAP":l.$set._lastBootstrap=s;break;case"Registered":l.$set._registered=s}}else switch(t.segments[1]){case"Inform":l.$unset._lastInform=1;break;case"1_BOOT":l.$unset._lastBoot=1;break;case"0_BOOTSTRAP":l.$unset._lastBootstrap=1;break;case"Registered":l.$unset._registered=1}break;case"DeviceID":if(c!==s){const s=e[2].value[1][0];switch(t.segments[1]){case"ID":l.$set._id=s;break;case"Manufacturer":l.$set["_deviceId._Manufacturer"]=s;break;case"OUI":l.$set["_deviceId._OUI"]=s;break;case"ProductClass":l.$set["_deviceId._ProductClass"]=s;break;case"SerialNumber":l.$set["_deviceId._SerialNumber"]=s}}break;case"Tags":c!==s&&(null!=c?(l.$addToSet._tags||(l.$addToSet._tags={$each:[]}),l.$addToSet._tags.$each.push(Pe(t.segments[1]))):(l.$pull._tags||(l.$pull._tags={$in:[]}),l.$pull._tags.$in.push(Pe(t.segments[1]))));break;default:if(!e[2]){let e=t.toString();if(e.endsWith("__invalid")){const t=e.split(".");t[t.length-1]=Pe(t[t.length-1].slice(0,0-"__invalid".length)),e=t.join(".")}l.$unset[e]=1;continue}for(const i of Object.keys(e[2]))if(e[2][i][0]>n&&(e[2][i][0]=n),null!=e[2][i][1])switch(i){case"value":c!==s&&("xsd:dateTime"===f&&Number.isInteger(c)?l.$set[t.toString()+"._value"]=new Date(c):l.$set[t.toString()+"._value"]=c),f!==u&&(l.$set[t.toString()+"._type"]=f),d!==p&&(l.$set[t.toString()+"._timestamp"]=new Date(d));break;case"object":(null===(a=e[1])||void 0===a?void 0:a.object)&&h===m||(l.$set[t.length?t.toString()+"._object":"_object"]=!!h);break;case"writable":(null===(r=e[1])||void 0===r?void 0:r.writable)&&g===v||(l.$set[t.length?t.toString()+"._writable":"_writable"]=!!g);break;case"notification":e[1]&&e[1].notification&&S===y||(l.$set[t.length?t.toString()+"._notification":"_notification"]=S),b!==w&&(l.$set[t.toString()+"._attributesTimestamp"]=new Date(b));break;case"accessList":e[1]&&e[1].accessList&&es(x,_)||(l.$set[t.length?t.toString()+"._accessList":"_accessList"]=x),b!==w&&(l.$set[t.toString()+"._attributesTimestamp"]=new Date(b))}if(e[1])for(const s of Object.keys(e[1]))if(null!=e[1][s][1]&&null==(null===(o=null===(i=e[2])||void 0===i?void 0:i[s])||void 0===o?void 0:o[1])){const e=t.length?t.toString()+".":"";l.$unset[`${e}_${s}`]=1,"value"===s?(l.$unset[e+"_type"]=1,l.$unset[e+"_timestamp"]=1):"notification"===s?null==x&&(l.$unset[`${e}_attributesTimestamp`]=1):"accessList"===s&&null==S&&(l.$unset[`${e}_attributesTimestamp`]=1)}}}l.$unset=function(e){if(e[""])return{"":e[""]};const t=Object.keys(e).sort();if(t.length<=1)return e;for(let s=1;s<t.length;++s){const n=t[s-1],a=t[s];a.startsWith(n)&&("."!==a.charAt(n.length)&&"."!==a.charAt(n.length-1)||(delete e[a],t.splice(s--,1)))}return e}(l.$unset);for(const e of Object.keys(l.$unset))null!=l.$set[e]&&delete l.$unset[e];for(const[e,t]of Object.entries(l)){if("$addToSet"===e)for(const[e,s]of Object.entries(t))s.$each.length||delete t[e];else if("$pull"===e)for(const[e,s]of Object.entries(t))s.$in.length||delete t[e];Object.keys(t).length||delete l[e]}if(!Object.keys(l).length)return;let c;l.$addToSet&&l.$pull&&(c={$pull:l.$pull},delete l.$pull);const u=await Yt.devices.updateOne({_id:e},l,{upsert:s});if(!u.matchedCount&&!u.upsertedCount)throw new Error(`Device ${e} not found in database`);c&&await Yt.devices.updateOne({_id:e},c)}async function rs(e){const t=await Yt.faults.find({_id:{$regex:`^${Le(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1),a={code:n.code,message:n.message,...n.detail&&{detail:n.detail},timestamp:+n.timestamp,provisions:JSON.parse(n.provisions),retries:n.retries,...n.expiry&&{expiry:+n.expiry}};s[t]=a}return s}async function is(e,t,s){const n=`${e}:${t}`,a={_id:n,device:e,channel:t,timestamp:new Date(s.timestamp),code:s.code,message:s.message,...s.detail&&{detail:s.detail},retries:s.retries,...s.expiry&&{expiry:new Date(s.expiry)},provisions:JSON.stringify(s.provisions)};await Yt.faults.replaceOne({_id:n},a,{upsert:!0})}async function os(e,t){await Yt.faults.deleteOne({_id:`${e}:${t}`})}async function ls(e,t){const s=Yt.tasks.find({device:e}).sort({timestamp:1}),n=[];for await(const e of s){if(+e.timestamp>=t)return[n,+e.timestamp];const s={_id:e._id.toString(),name:e.name,...e.timestamp&&{timestamp:+e.timestamp},...e.expiry&&{expiry:+e.expiry},..."getParameterValues"===e.name&&{parameterNames:e.parameterNames},..."setParameterValues"===e.name&&{parameterValues:e.parameterValues},..."refreshObject"===e.name&&{objectName:e.objectName},..."download"===e.name&&{fileType:e.fileType,fileName:e.fileName,targetFileName:e.targetFileName},..."addObject"===e.name&&{objectName:e.objectName,parameterValues:e.parameterValues},..."deleteObject"===e.name&&{objectName:e.objectName},..."provisions"===e.name&&{provisions:e.provisions}};if(n.push(s),"download"===s.name&&e.file){let t;t=m.ObjectId.isValid(e.file)?{_id:{$in:[e.file,new m.ObjectId(e.file)]}}:{_id:e.file};const n=await Yt.files.find(t).toArray();n[0]&&(s.fileType||(s.fileType=n[0].metadata.fileType),s.fileName||(s.fileName=n[0].filename||n[0]._id.toString()))}}return[n,null]}async function cs(e){const t=await Yt.operations.find({_id:{$regex:`^${Le(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1);if("string"!=typeof n.provisions){delete n._id,s[t]=n;continue}const a={name:n.name,timestamp:+n.timestamp,channels:"string"==typeof n.channels?JSON.parse(n.channels):n.channels,retries:JSON.parse(n.retries),provisions:JSON.parse(n.provisions),...n.args&&{args:JSON.parse(n.args)}};s[t]=a}return s}async function us(e,t,s){const n=`${e}:${t}`,a={_id:n,name:s.name,timestamp:new Date(s.timestamp),channels:JSON.stringify(s.channels),provisions:JSON.stringify(s.provisions),retries:JSON.stringify(s.retries),args:JSON.stringify(s.args)};await Yt.operations.replaceOne({_id:n},a,{upsert:!0})}async function fs(e,t){await Yt.operations.deleteOne({_id:`${e}:${t}`})}ss((async e=>{Yt.tasks=e.collection("tasks"),await Yt.tasks.createIndex({device:1,timestamp:1}),Yt.devices=e.collection("devices"),Yt.presets=e.collection("presets"),Yt.objects=e.collection("objects"),Yt.files=e.collection("fs.files"),Yt.provisions=e.collection("provisions"),Yt.virtualParameters=e.collection("virtualParameters"),Yt.faults=e.collection("faults"),Yt.operations=e.collection("operations"),Yt.permissions=e.collection("permissions"),Yt.users=e.collection("users"),Yt.config=e.collection("config")}));const ps=+J("MAX_CACHE_TTL");let ds;async function ms(e){const t=await ds.findOne({_id:e});return null==t?void 0:t.value}async function hs(e,t,s=ps){const n=new Date,a=new Date(n.getTime()+3e4+1e3*s);await ds.replaceOne({_id:e},{value:t,expire:a,timestamp:n},{upsert:!0})}async function gs(e){var t;return null===(t=(await ds.findOneAndDelete({_id:e})).value)||void 0===t?void 0:t.value}async function vs(e,t,s=0,n=Math.random().toString(36).slice(2)){try{const s=Date.now(),a=await ds.findOneAndUpdate({_id:e,value:n},{$set:{expire:new Date(s+t+3e4)},$currentDate:{timestamp:!0}},{upsert:!0,returnDocument:"after"});if(Math.abs(a.value.timestamp.getTime()-s)>3e4)throw new Error("Database clock skew too great")}catch(a){if(11e3!==a.code)throw a;if(!(s>0))return null;const r=50+50*Math.random();return await new Promise((e=>setTimeout(e,r))),vs(e,t,s-r,n)}return n}async function ws(e,t){if(1!==(await ds.deleteOne({_id:e,value:t})).deletedCount)throw new Error("Lock expired")}ss((async e=>{ds=e.collection("cache"),await ds.createIndex({expire:1},{expireAfterSeconds:0})}));BigInt;const bs=Array.isArray,ys=new WeakMap,Ss={};function _s(e,t){let s=!0;for(;s;){s=!1;for(let n=2;n<e.length;++n){const a=t(e[n-1],e[n],n-2);a!==Ss&&(s=!0,(e=e.slice()).splice(n-1,2,a))}}return 2===e.length?e[1]:e}function xs(e,t="",s=""){const n={"-":"\\-","/":"\\/","\\":"\\/","^":"\\^",$:"\\$","*":"\\*","+":"\\+","?":"\\?",".":"\\.","(":"\\(",")":"\\)","|":"\\|","[":"\\[","]":"\\]","{":"\\{","}":"\\}","\\%":".*","\\_":"."};let a=Zt(e,t);if(!a.length)return new RegExp("^$",s);a=a.map((e=>n[e]||e)),a[0]=".*"===a[0]?"":"^"+a[0];const r=a.length-1;return a[r]=[".*",""].includes(a[r])?"":a[r]+"$",new RegExp(a.join(""),s)}function Os(e,t){return"boolean"==typeof e&&(e=+e),"boolean"==typeof t&&(t=+t),typeof e!=typeof t?"string"==typeof e?1:-1:e>t?1:e<t?-1:0}function Ns(e){switch(typeof e){case"number":return e;case"boolean":return+e;case"string":return parseFloat(e)||0}}function Rs(e){switch(typeof e){case"string":return e;case"number":return e.toString();case"boolean":return(+e).toString()}}function Ds(e){if(!Array.isArray(e))return e;if("CASE"===e[0]){for(let t=1;t<e.length;t+=2){if(Array.isArray(e[t]))return e;if(e[t])return e[t+1]}return null}if("FUNC"===e[0]){if("COALESCE"===e[1]){const t=[];for(let s=2;s<e.length;++s){const n=e[s];if(null!=n&&(t.push(n),!Array.isArray(n)))break}return t.length?1===t.length?t[0]:["FUNC","COALESCE",...t]:null}if("UPPER"===e[1]){if(null==e[2])return null;if(!bs(e[2]))return Rs(e[2]).toUpperCase()}else if("LOWER"===e[1]){if(null==e[2])return null;if(!bs(e[2]))return Rs(e[2]).toLowerCase()}else if("ROUND"===e[1]){const t=e[2],s=e.length>3?e[3]:0;if(null==t||null==s)return null;if(!bs(t)&&!bs(s)){const e=10**s,n=t*e*(1+Number.EPSILON);return Math.round(n)/e}}}else if("PARAM"===e[0]){if(null==e[1])return null}else{if("AND"===e[0]){for(let t=1;t<e.length;++t)if(!Array.isArray(e[t])&&null!=e[t]&&!e[t])return!1;const t=[];for(let s=1;s<e.length;++s){const n=e[s];if(null==n)return null;Array.isArray(n)&&("AND"===n[0]?t.push(...n.slice(1)):t.push(n))}return!t.length||(1===t.length&&t.push(!0),["AND",...t])}if("OR"===e[0]){const t=[];for(let s=1;s<e.length;++s){const n=e[s];if(Array.isArray(n))"OR"===n[0]?t.push(...n.slice(1)):t.push(n);else if(n)return!0}return t.length?(1===t.length&&t.push(!1),["OR",...t]):!!e.some((e=>null==e))&&null}if("NOT"===e[0]){if(null==e[1])return null;if(!bs(e[1]))return!e[1];if("NOT"===e[1][0])return e[1][1]}else{if("IS NULL"===e[0])return bs(e[1])?e:null==e[1];if("IS NOT NULL"===e[0])return bs(e[1])?e:null!=e[1];if("LIKE"===e[0]){if(bs(e[1])||bs(e[2])||bs(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=ys.get(e);return t||(t=xs(e[2],e[3]),ys.set(e,t)),t.test(e[1])}if("NOT LIKE"===e[0]){if(bs(e[1])||bs(e[2])||bs(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=ys.get(e);return t||(t=xs(e[2],e[3]),ys.set(e,t)),!t.test(e[1])}if("="===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:0===Os(e[1],e[2]);if("<>"===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:0!==Os(e[1],e[2]);if(">"===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:Os(e[1],e[2])>0;if(">="===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:Os(e[1],e[2])>=0;if("<"===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:Os(e[1],e[2])<0;if("<="===e[0])return null==e[1]||null==e[2]?null:bs(e[1])||bs(e[2])?e:Os(e[1],e[2])<=0;if("*"===e[0])return _s(e,((e,t)=>null==e||null==t?null:bs(e)||bs(t)?Ss:Ns(e)*Ns(t)));if("/"===e[0])return _s(e,((e,t,s)=>{if(null==e||null==t)return null;if(bs(e)||bs(t))return Ss;const n=Ns(e),a=Ns(t);return 0!==s?n*a:0===a?null:n/a}));if("+"===e[0])return _s(e,((e,t)=>null==e||null==t?null:bs(e)||bs(t)?Ss:Ns(e)+Ns(t)));if("-"===e[0])return _s(e,((e,t,s)=>null==e||null==t?null:bs(e)||bs(t)?Ss:0===s?Ns(e)-Ns(t):Ns(e)+Ns(t)));if("%"===e[0])return _s(e,((e,t,s)=>{if(null==e||null==t)return null;if(bs(e)||bs(t)||0!==s)return Ss;const n=Ns(e),a=Math.trunc(Ns(t));return 0===a?null:n%a}));if("||"===e[0])return _s(e,((e,t)=>null==e||null==t?null:bs(e)||bs(t)?Ss:Rs(e)+Rs(t)))}}return e}function Ts(e,t,s,n){return zt(e,(e=>{if(n&&(e=n(e)),!bs(e))return e;if("FUNC"===e[0]&&"NOW"===e[1]){if(s)return s}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!bs(e[1])){let s;return s="function"==typeof t?t(e[1]):t[e[1]],null==s?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return Ds(e)}))}async function As(e,t,s,n){return Jt(e,(async e=>{if(n&&(e=await n(e)),!bs(e))return e;if("FUNC"===e[0]){if("NOW"===e[1]&&s)return s}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!bs(e[1])){let s=t[e[1]];return null==s?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return Ds(e)}))}function Cs(e){const t=new Set;return zt(e,(e=>(bs(e)&&"PARAM"===e[0]&&t.add(e[1]),e))),Array.from(t)}class Es{constructor(){this.variables=new Map,this.clauses=new Map}getVar(e){const t=e.toString();let s=this.variables.get(t);return null==s&&(s=this.variables.size,this.variables.set(t,s),this.clauses.set(s,e)),s}getClause(e){return this.clauses.get(e)}canRaise(e,t){return!0}sanitizeMinterms(e){return e}minimize(e,t=[]){e=this.sanitizeMinterms(e);const s=this.canRaise.bind(this);return g.espresso(e,[...this.getDcSet(e),...t],{canRaise:s})}}function*Is(e){if(!Array.isArray(e))return;const t=e[0];if("IS NULL"!==t&&"IS NOT NULL"!==t){if("FUNC"===t){if("NOW"===e[1])return;if("LOWER"===e[1]||"UPPER"===e[1])yield*Is(e[2]);else if("ROUND"===e[1]){for(const t of e.slice(2,4))yield*Is(t);return}}else if("PARAM"!==t){for(const t of e.slice(1))yield*Is(t);return}yield e}}class $s{expression(){if(void 0!==this._expression)return this._expression;const e=Ps(),t=this.true(e),s=e.minimize(t);return this._expression=e.toExpression(s),this._expression}isBoolean(){return!0}isNullable(e){return this._isNullable||(this._isNullable=new Set([...this.getNullables()].map((e=>e.toString())))),this._isNullable.has(e.toString())}*getNullables(){const e=this.expression();for(const t of Is(e))t===e?yield new $s.IsNull(this):yield new $s.IsNull(new $s.Exp(t))}toString(){return JSON.stringify(this.expression())}}function Ls(e,t){const s=new Map;for(const n of e){const e=t(n);let a=s.get(e);a||s.set(e,a=[]),a.push(n)}return s.entries()}!function(e){class t extends e{constructor(e){super(),this.operand=e}true(e){return this.operand.false(e)}false(e){return this.operand.true(e)}null(e){return this.operand.null(e)}}e.Not=t;class s extends e{constructor(e){super(),this.operands=e}true(e){const t=[];for(const s of this.operands){const n=s.true(e);if(1===n.length&&!n[0].length)return[[]];t.push(...n)}return t}false(e){const t=[],n=[...this.operands];for(const a of n){if(a instanceof s){n.push(...a.operands);continue}const r=a.false(e);if(!r.length)return[];t.push(r)}return t.length?1===t.length?t[0]:g.complement(t.map((e=>g.complement(e))).flat()):[[]]}null(e){const t=[],n=[...this.operands];for(const a of n){if(a instanceof s){n.push(...a.operands);continue}const r=a.true(e);if(1===r.length&&!r[0].length)return[];t.push(...r)}const a=[];for(const s of n){const n=s.null(e);if(1===n.length&&!n[0].length&&!t.length)return[[]];a.push(...n)}return t.length?g.complement([...g.complement(a),...t]):a}}e.Or=s;class n extends e{constructor(e){super(),this.operands=e}true(e){const t=[],s=[...this.operands];for(const a of s){if(a instanceof n){s.push(...a.operands);continue}const r=a.true(e);if(!r.length)return[];(1!==r.length||r[0].length)&&t.push(r)}return t.length?1===t.length?t[0]:g.complement(t.map((e=>g.complement(e))).flat()):[[]]}false(e){const t=[];for(const s of this.operands){const n=s.false(e);if(1===n.length&&!n[0].length)return[[]];t.push(...n)}return t}null(e){const t=[],s=[...this.operands];for(const a of s){if(a instanceof n){s.push(...a.operands);continue}const r=a.false(e);if(1===r.length&&!r[0].length)return[];t.push(...r)}const a=[];for(const n of s){const s=n.null(e);if(1===s.length&&!s[0].length&&!t.length)return[[]];a.push(...s)}return t.length?g.complement([...g.complement(a),...t]):a}}e.And=n;e.Case=class extends e{constructor(e){super(),this.clauses=e}true(e){const t=[],s=[];for(let n=0;n<this.clauses.length;n+=2){const a=this.clauses[n].true(e),r=this.clauses[n+1].true(e);t.push(...g.complement([...s,...g.complement(a),...g.complement(r)])),n<this.clauses.length-2&&s.push(...g.complement([...this.clauses[n].false(e),...this.clauses[n].null(e)]))}return t}false(e){const t=[],s=[];for(let n=0;n<this.clauses.length;n+=2){const a=this.clauses[n].true(e),r=this.clauses[n+1].false(e);t.push(...g.complement([...s,...g.complement(a),...g.complement(r)])),n<this.clauses.length-2&&s.push(...g.complement([...this.clauses[n].false(e),...this.clauses[n].null(e)]))}return t}null(e){const t=[],s=[];for(let n=0;n<this.clauses.length;n+=2){const a=this.clauses[n].true(e),r=this.clauses[n+1].null(e);t.push(...g.complement([...s,...g.complement(a),...g.complement(r)])),s.push(...g.complement([...this.clauses[n].false(e),...this.clauses[n].null(e)]))}return t.push(...g.complement([...s])),t}expression(){if(null!=this._expression)return this._expression;if(this.isBoolean())return this._expression=new e.Not(new e.Not(this)).expression(),this._expression;const t=Ps(),s=[];for(let e=0;e<this.clauses.length;e+=2){let n=this.clauses[e].true(t);const a=this.clauses[e+1].expression();if(s.length&&JSON.stringify(a)===JSON.stringify(s[s.length-1].then)&&n.push(...s.pop().when),n=t.minimize(n,s.flatMap((e=>e.when))),n.length&&(s.push({when:n,then:a}),1===n.length&&!n[0].length))break}for(;null==s[s.length-1].then;)s.pop();return s.length?(this._expression=["CASE",...s.flatMap((e=>[t.toExpression(e.when),e.then]))],this._expression):null}isBoolean(){for(let e=1;e<this.clauses.length;e+=2)if(!this.clauses[e].isBoolean())return!1;return!0}};e.IsNull=class extends e{constructor(e){super(),this.operand=e,this._boolean=new t(new t(this))}true(e){return this.operand.null(e)}false(e){return g.complement(this.true(e))}null(){return[]}isBoolean(){return!0}*getNullables(){}expression(){const e=[...this.operand.getNullables()];return 1===e.length&&e[0].operand===this.operand?["IS NULL",this.operand.expression()]:super.expression()}};class a extends e{constructor(e){super(),this.exp=e}true(e){return Array.isArray(this.exp)?e.getMinterms(this,!0):this.exp?[[]]:[]}false(e){return Array.isArray(this.exp)?e.getMinterms(this,!1):this.exp||null==this.exp?[]:[[]]}null(e){return Array.isArray(this.exp)?e.getMinterms(this,null):null==this.exp?[[]]:[]}expression(){return this.exp}isBoolean(){return!0===this.exp||!1===this.exp||null==this.exp}}e.Exp=a;e.Compare=class extends e{constructor(e,t,s){super(),this.lhs=e,this.op=t,this.rhs=s}true(e){return e.getMinterms(this,!0)}false(e){return e.getMinterms(this,!1)}null(e){return this.lhs.null(e)}*getNullables(){yield*this.lhs.getNullables()}isBoolean(){return!0}expression(){return[this.op,this.lhs.expression(),this.rhs]}};e.Like=class extends e{constructor(e,t,s){super(),this.rhs=t,this.esc=s;const n=e.expression();let r=!0,i=!1;if(Array.isArray(n)&&"FUNC"===n[0]){const s=n[1];if("UPPER"===s||"LOWER"===s){("UPPER"===s?t.toUpperCase():t.toLowerCase())===t?r=!1:i=!0,e=new a(n[2])}}this.lhs=e,this.pattern=Zt(t,s),this.caseSensitive=r,this.contradiction=i}true(e){return e.getMinterms(this,!0)}false(e){return e.getMinterms(this,!1)}null(e){return this.lhs.null(e)}isBoolean(){return!0}isNullable(e){return this.lhs.isNullable(e)}getNullables(){return this.lhs.getNullables()}expression(){let e=this.lhs.expression();return this.contradiction?e=this.rhs===this.rhs.toLocaleUpperCase()?["FUNC","LOWER",e]:["FUNC","UPPER",e]:this.caseSensitive||(e=this.rhs===this.rhs.toLocaleUpperCase()?["FUNC","UPPER",e]:["FUNC","LOWER",e]),["LIKE",e,this.rhs,...this.esc?[this.esc]:[]]}},e.fromExpression=function(t){return zt(t,(t=>{if(!Array.isArray(t))return new e.Exp(t);let s,n=t[0],r=!0;if("NOT LIKE"===n?n="LIKE":"IS NOT NULL"===n?n="IS NULL":"<>"===n?n="=":">="===n?n="<":"<="===n?n=">":r=!1,"IS NULL"===n)s=new e.IsNull(t[1]);else if("NOT"===n)s=new e.Not(t[1]);else if("OR"===n)s=new e.Or(t.slice(1));else if("AND"===n)s=new e.And(t.slice(1));else if("CASE"===n)s=new e.Case(t.slice(1));else if("LIKE"===n){const n=t[2]instanceof a?t[2].expression():null,r=t[3]instanceof a?t[3].expression():null;"string"==typeof n&&"string"==typeof r?s=new e.Like(t[1],n,r):"string"==typeof n&&null==r&&(s=new e.Like(t[1],n))}else if(">"===n||"<"===n||"="===n){const r=t[2]instanceof a?t[2].expression():null;["boolean","number","string"].includes(typeof r)&&(s=new e.Compare(t[1],n,r))}if(!s){const a=t.slice(1).map((e=>e.expression()));s=new e.Exp([n,...a])}return r&&(s=new e.Not(s)),s}))}}($s||($s={}));class ks extends Es{constructor(){super()}getMinterms(e,t){const s=this.getVar(e);return!0===t?[[s<<2^3]]:!1===t?[[s<<2^1]]:[[s<<2,s<<2^2]]}getDcSet(e){const t=[],s=new Set([...e.flat()].map((e=>e>>2))),n=[...s].map((e=>this.getClause(e))),a=n.filter((e=>e instanceof $s.Compare));for(const[,e]of Ls(a,(e=>JSON.stringify(e.lhs)))){const n=e[0].lhs,a=[...new Set(e.map((e=>e.rhs)))].sort(((e,t)=>{const s=typeof e,n=typeof t;return s===n?e>t?1:-1:"string"===s?1:"string"===n?-1:+e-+t}));for(const[e,r]of a.entries()){const i=this.getVar(new $s.Compare(n,"=",r)),o=this.getVar(new $s.Compare(n,">",r)),l=this.getVar(new $s.Compare(n,"<",r));t.push([i<<2^3,o<<2^3]),t.push([l<<2^3,o<<2^3]),t.push([l<<2^3,i<<2^3]),t.push([l<<2^1,i<<2^1,o<<2^1]);const c=[l,i,o].filter((e=>!s.has(e)));1===c.length&&s.add(c[0]);for(let s=0;s<e;s++){const e=this.getVar(new $s.Compare(n,"=",a[s])),r=this.getVar(new $s.Compare(n,">",a[s])),c=this.getVar(new $s.Compare(n,"<",a[s]));t.push([r<<2^1,l<<2^1]),t.push([e<<2^3,l<<2^1]),t.push([c<<2^3,l<<2^1]),t.push([r<<2^1,o<<2^3]),t.push([r<<2^1,i<<2^3]),t.push([e<<2^3,o<<2^3]),t.push([e<<2^3,i<<2^3]),t.push([c<<2^3,o<<2^3]),t.push([c<<2^3,i<<2^3])}}}const r=n.filter((e=>e instanceof $s.Like));for(const[,e]of Ls(r,(e=>JSON.stringify(e.lhs))))for(let s=0;s<e.length;++s){const n=e[s];if(n.contradiction)t.push([this.getVar(n)<<2^3]);else for(let a=s+1;a<e.length;++a){const s=e[a];if(s.contradiction)continue;let r=n.pattern,i=s.pattern;n.caseSensitive&&s.caseSensitive||(r=r.map((e=>e.toLowerCase())),i=i.map((e=>e.toLowerCase()))),Ms(r,i)?t.push([this.getVar(n)<<2^3,this.getVar(s)<<2^3]):n.caseSensitive&&!s.caseSensitive||!js(r,i)?s.caseSensitive&&!n.caseSensitive||!js(i,r)||(t.push([this.getVar(n)<<2^3,this.getVar(s)<<2^2]),t.push([this.getVar(n)<<2^0,this.getVar(s)<<2^1])):(t.push([this.getVar(n)<<2^2,this.getVar(s)<<2^3]),t.push([this.getVar(n)<<2^1,this.getVar(s)<<2^0]))}}for(const e of s){const n=this.getClause(e),a=[...n.getNullables()].map((e=>this.getVar(e)));if(a.length){t.push([...a.map((e=>e<<2^2)),e<<2^0,e<<2^2]);for(const n of a)t.push([n<<2^3,e<<2^1]),t.push([n<<2^3,e<<2^3]),s.add(n)}if(n instanceof $s.IsNull){const s=n.operand.toString();'["PARAM","DeviceID.ID"]'!==s&&'["PARAM","_id"]'!==s||t.push([e<<2^3])}}return t.filter((e=>e.every((e=>s.has(e>>2)))))}canRaise(e,t){const s=this.getClause(e>>2);if(s instanceof $s.IsNull){for(const n of t){if(n===e||1&n)continue;if(this.getClause(n>>2).isNullable(s))return!1}return!0}return!(1&e&&t.has(3^e))}sanitizeMinterms(e){const t=[];e:for(const s of e){const e=new Map;for(const t of s)e.set(t>>2,(e.get(t>>2)||0)|1<<(3&t));const n=[],a=[];for(const[t,s]of e){if(10===s)continue e;const e=[...this.clauses.get(t).getNullables()].map((e=>this.getVar(e))),r=t<<2;5===s?1===e.length?n.push(e[0]<<2^3):a.push(e.map((e=>e<<2^3))):1===s?a.push([...e.map((e=>e<<2^3)),3^r]):4===s?a.push([...e.map((e=>e<<2^3)),1^r]):8&s?n.push(3^r):2&s&&n.push(1^r)}let r=[n];for(;a.length;){const e=[],t=a.pop();for(const s of t)e.push(...r.map((e=>[...e,s])));r=e}t.push(...r)}return t}toExpression(e){if(!e.length)return!1;const t=[];for(const s of e){if(!s.length)return!0;const e=[];for(const t of s){let s=this.getClause(t>>>2).expression();if(!(1&t)!=!(2&t)&&(s=["NOT",s]),Array.isArray(s)&&"NOT"===s[0]&&Array.isArray(s[1])){const e=s[1];"IS NULL"===e[0]?s=["IS NOT NULL",...e.slice(1)]:"LIKE"===e[0]?s=["NOT LIKE",...e.slice(1)]:"="===e[0]?s=["<>",...e.slice(1)]:"<>"===e[0]?s=["=",...e.slice(1)]:">"===e[0]?s=["<=",...e.slice(1)]:">="===e[0]?s=["<",...e.slice(1)]:"<"===e[0]?s=[">=",...e.slice(1)]:"<="===e[0]?s=[">",...e.slice(1)]:"NOT"===e[0]&&(s=e[1])}e.push(s)}e.length>1?t.push(["AND",...e]):t.push(e[0])}return t.length>1?["OR",...t]:t[0]}}function Ps(){return new ks}function js(e,t){let s=null;for(let n=0,a=0;;++n,++a){for(;n<e.length&&"\\%"===e[n];)s=[n++,a];if(a>=t.length)return n>=e.length;const r=n<e.length?e[n]:null;if(r!==t[a]&&"\\_"!==r){if(!s)return!1;[n,a]=s,++s[1]}}}function Ms(e,t){const s=e.indexOf("\\%"),n=t.indexOf("\\%"),a=e.lastIndexOf("\\%"),r=t.lastIndexOf("\\%"),i=e.slice(0,-1!==s?s:e.length),o=t.slice(0,-1!==n?n:t.length),l=e.slice(-1!==a?a+1:0).reverse(),c=t.slice(-1!==r?r+1:0).reverse();for(let e=0;e<Math.min(i.length,o.length);++e)if(i[e]!==o[e]&&"\\_"!==i[e]&&"\\_"!==o[e])return!0;for(let e=0;e<Math.min(l.length,c.length);++e)if(l[e]!==c[e]&&"\\_"!==l[e]&&"\\_"!==c[e])return!0;return e.length===i.length?t.filter((e=>"\\%"!==e)).length>e.length:t.length===o.length&&e.filter((e=>"\\%"!==e)).length>t.length}const Fs=new Map;let qs=null,Us=1;function Vs(e,t="",s={}){for(const n of Object.keys(e)){const a=e[n];"object"!=typeof a||Array.isArray(a)?s[`${t}${n}`]=a:Vs(a,`${t}${n}.`,s)}return s}async function Gs(){const e=await async function(){return Yt.presets.find().toArray()}();let t=await async function(){return Yt.objects.find().toArray()}();t=t.map((e=>{var t;return(null===(t=(e=Vs(e))._keys)||void 0===t?void 0:t.length)||(e._keys=Object.keys(e).filter((e=>!e.startsWith("_")))),e})),e.sort(((e,t)=>e.weight===t.weight?e._id>t._id?1:e._id<t._id?-1:0:e.weight-t.weight));const s=[];for(const a of e){let e=null;if(a.schedule){const t=a.schedule.trim().split(/\s+/);e={md5:A.createHash("md5").update(a.schedule).digest("hex"),duration:null,schedule:null};try{e.duration=1e3*+t.shift(),e.schedule=$t(t.join(" "))}catch(t){Se({message:"Invalid preset schedule",preset:a._id,schedule:a.schedule}),e.schedule=!1}}const r=a.events||{};let i=!0;if(a.precondition){try{i=Xt(a.precondition)}catch(e){n=JSON.parse(a.precondition),i=!Object.keys(n).length||function e(t){const s=[];for(const[n,a]of Object.entries(t))if("$"===n[0])if("$and"===n){const t=["AND"];for(const s of Object.values(a))t.push(e(s));s.push(t)}else{if("$or"!==n)throw new Error(`Operator ${n} not supported`);{const t=["OR"];for(const s of Object.values(a))t.push(e(s));s.push(t)}}else if("_tags"===n)if("object"==typeof a){if(Array.isArray(a))throw new Error("Invalid type");const e=[];for(const[t,s]of Object.entries(a))if("$ne"===t){if("string"!=typeof a.$ne)throw new Error("Only string values are allowed for _tags");e.push(["IS NULL",["PARAM",`Tags.${ke(s)}`]])}else{if("$eq"!==t)throw new Error("Invalid tag query");if("string"!=typeof a.$eq)throw new Error("Only string values are allowed for _tags");e.push(["IS NOT NULL",["PARAM",`Tags.${ke(s)}`]])}1===e.length?s.push(e[0]):e.length>1&&s.push(["AND",...e])}else s.push(["IS NOT NULL",["PARAM",`Tags.${ke(a)}`]]);else if(n.startsWith("Tags.")){let e;if("boolean"==typeof a)e=a;else if(a.hasOwnProperty("$eq"))e=!!a.$eq;else if(a.hasOwnProperty("$ne"))e=!a.$ne;else{if(!a.hasOwnProperty("$exists"))throw new Error("Invalid tag query");e=!!a.$exists}s.push([e?"IS NOT NULL":"IS NULL",["PARAM",n]])}else if("object"==typeof a){if(Array.isArray(a))throw new Error("Invalid type");const e=[];for(const[t,s]of Object.entries(a)){if("$eq"===t)e.push(["=",["PARAM",n],s]);else if("$ne"===t)e.push(["OR",["<>",["PARAM",n],s],["IS NULL",["PARAM",n]]]);else if("$lt"===t)e.push(["<",["PARAM",n],s]);else if("$lte"===t)e.push(["<=",["PARAM",n],s]);else if("$gt"===t)e.push([">",["PARAM",n],s]);else{if("$gte"!==t)throw new Error(`Operator ${t} not supported`);e.push([">=",["PARAM",n],s])}if(!["string","number","boolean"].includes(typeof s))throw new Error(`Invalid value for ${t} operator`)}if(1===e.length)s.push(e[0]);else if(e.length>1){const t=["AND"];s.push(t.concat(e))}}else s.push(["=",["PARAM",n],a]);return 1===s.length?s[0]:0===s.length||["AND",...s]}(n)}i=Ts(i)}const o=a.provisions||[];for(const e of a.configurations)switch(e.type){case"age":o.push(["refresh",e.name,+e.age]);break;case"value":o.push(["value",e.name,e.value]);break;case"add_tag":o.push(["tag",e.tag,!0]);break;case"delete_tag":o.push(["tag",e.tag,!1]);break;case"provision":o.push([e.name].concat(e.args||[]));break;case"add_object":for(const s of t)if(s._id===e.object){const t=s._keys.map((e=>`${e}:${JSON.stringify(s[e])}`)).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,1]);for(const e in s)e.startsWith("_")||-1!==s._keys.indexOf(e)||o.push(["value",`${n}.${e}`,s[e]])}break;case"delete_object":for(const s of t)if(s._id===e.object){const t=s._keys.map((e=>`${e}:${JSON.stringify(s[e])}`)).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,0])}break;default:throw new Error(`Unknown configuration type ${e.type}`)}s.push({name:a._id,channel:a.channel||"default",schedule:e,events:r,precondition:i,provisions:o})}var n;return s}async function Ws(){const e=await async function(){return Yt.provisions.find().toArray()}(),t={};for(const s of e)t[s._id]={},t[s._id].md5=A.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new C.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function Bs(){const e=await async function(){return Yt.virtualParameters.find().toArray()}(),t={};for(const s of e)t[s._id]={},t[s._id].md5=A.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new C.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function zs(){const e=await async function(){return Yt.permissions.find().toArray()}(),t={};for(const s of e)t[s.role]||(t[s.role]={}),t[s.role][s.access]||(t[s.role][s.access]={}),t[s.role][s.access][s.resource]={access:s.access,filter:Xt(s.filter||"true")},s.validate&&(t[s.role][s.access][s.resource].validate=Xt(s.validate));return t}async function Js(){const e=await Yt.files.find().toArray(),t={};for(const s of e){const e=s.filename||s._id.toString();t[e]={},t[e].length=s.length}return t}async function Ks(){const e=await async function(){return Yt.users.find().toArray()}(),t={};for(const s of e)t[s._id]={password:s.password,salt:s.salt,roles:s.roles.split(",").map((e=>e.trim()))};return t}async function Hs(){const e=await async function(){return(await Yt.config.find().toArray()).map((e=>({id:e._id,value:Xt(e.value)})))}();e.sort(((e,t)=>e.id>t.id?1:e.id<t.id?-1:0));const t={filters:{},device:{},index:{},overview:{},pageSize:null},s={};for(const n of e){const e=Ts(n.value);if(s[n.id]=e,n.id.startsWith("ui.")){const s=n.id.split(".");if(!(s[1]in t))continue;s.shift();let a=t;for(;s.length>1;){const e=s.shift();null!=a[e]&&"object"==typeof a[e]||(a[e]={}),a=a[e]}a[s[0]]=e}}return[s,t]}async function Xs(){if(!Us)return await new Promise((e=>setTimeout(e,20))),Xs();const e=Date.now();if(e<Us)return;Us=0;const t=await ms("presets_hash");if(qs&&t===qs)return void(Us=e+(5e3-e%5e3));const s=await vs("presets_hash_lock",5e3),n=await Promise.all([Gs(),Ws(),Bs(),Js(),zs(),Ks(),Hs()]),a={presets:n[0],provisions:n[1],virtualParameters:n[2],files:n[3],permissions:n[4],users:n[5],config:n[6][0],ui:n[6][1]};if(qs){const e=qs,t=Fs.get(e);setTimeout((()=>{Fs.get(e)===t&&Fs.delete(e)}),12e4).unref()}qs=function(e){const t=A.createHash("md5");for(const s of e.presets)t.update(JSON.stringify(s.name)),t.update(JSON.stringify(s.channel)),t.update(JSON.stringify(s.schedule)),t.update(JSON.stringify(s.events)),t.update(JSON.stringify(s.precondition)),t.update(JSON.stringify(s.provisions));let s;s=Object.keys(e.provisions).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.provisions[n].md5);s=Object.keys(e.virtualParameters).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.virtualParameters[n].md5);s=Object.keys(e.config).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.config[n]));s=Object.keys(e.files).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.files[n]));s=Object.keys(e.users).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.users[n]));const n=Object.keys(e.permissions).sort();t.update(JSON.stringify(n));for(const a of n){const n=Object.keys(e.permissions[a]).sort();t.update(JSON.stringify(n));for(const r of n){s=Object.keys(e.permissions[a][r]).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.permissions[a][r][n]))}}return t.digest("hex")}(a),Fs.set(qs,a),s&&(qs!==t&&await hs("presets_hash",qs,300),await ws("presets_hash_lock",s)),Us=e+(5e3-e%5e3)}async function Zs(){return Date.now()>Us&&await Xs(),qs}function Ys(e){const t=Fs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.virtualParameters}function Qs(e,t,s,n,a){const r=Fs.get(e);if(!r)throw new Error("Cache snapshot does not exist");const i={"cwmp.downloadTimeout":"DOWNLOAD_TIMEOUT","cwmp.debug":"DEBUG","cwmp.retryDelay":"RETRY_DELAY","cwmp.sessionTimeout":"SESSION_TIMEOUT","cwmp.connectionRequestTimeout":"CONNECTION_REQUEST_TIMEOUT","cwmp.gpnNextLevel":"GPN_NEXT_LEVEL","cwmp.gpvBatchSize":"GPV_BATCH_SIZE","cwmp.cookiesPath":"COOKIES_PATH","cwmp.datetimeMilliseconds":"DATETIME_MILLISECONDS","cwmp.booleanLiteral":"BOOLEAN_LITERAL","cwmp.connectionRequestAllowBasicAuth":"CONNECTION_REQUEST_ALLOW_BASIC_AUTH","cwmp.maxCommitIterations":"MAX_COMMIT_ITERATIONS","cwmp.deviceOnlineThreshold":"DEVICE_ONLINE_THRESHOLD","cwmp.udpConnectionRequestPort":"UDP_CONNECTION_REQUEST_PORT"};if(!(t in r.config)){if(t in i){let e;return(null==s?void 0:s.id)?e=s.id:a&&(e=a(["PARAM","DeviceID.ID"]),Array.isArray(e)&&(e=null)),J(i[t],e)}return null}const o=Ts(r.config[t],s,n,a);return Array.isArray(o)?null:o}const en=+J("MAX_DEPTH");const tn=Object.freeze({__proto__:null,refresh:function(e,t,s){if((2!==t.length||"string"!=typeof t[1])&&(3!==t.length||"string"!=typeof t[1]||"number"!=typeof t[2])&&(t.length<4||"string"!=typeof t[1]||"number"!=typeof t[2]||"boolean"!=typeof t[3]))throw new Error("Invalid arguments");const n=1e3*(t[2]||1),a=Et(e.deviceId,n),r=It(e.timestamp,n,a);let i,o;if(null==t[3])o=!0,i={object:1,writable:1,value:r};else{i={},o=!!t[3];for(const e of t.slice(4))i[e]=r}let l=Ze.parse(t[1]),c=l.length;if(o){const e=l.segments.slice();c=e.length,e.length=en,e.fill("*",c),l=Ze.parse(e.join("."))}for(let e=c;e<=l.length;++e)s.push({path:l.slice(0,e),pathGet:r,pathSet:null,attrGet:i,attrSet:null,defer:!0});return!0},value:function(e,t,s){if(t.length<3||t.length>4||"string"!=typeof t[1])throw new Error("Invalid arguments");let n,a;return 3===t.length?(n="value",a=t[2]):(n=t[2]||"",a=t[3]),"accessList"===n?a=(a||"").split(",").map((e=>e.trim())).filter((e=>!!e)):"value"===n&&(a=[a]),s.push({path:Ze.parse(t[1]),pathGet:1,pathSet:null,attrGet:{[n]:1},attrSet:{[n]:a},defer:!0}),!0},tag:function(e,t,s){if(3!==t.length||"string"!=typeof t[1]||"boolean"!=typeof t[2])throw new Error("Invalid arguments");return s.push({path:Ze.parse(`Tags.${t[1]}`),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[t[2]]},defer:!0}),!0},reboot:function(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:Ze.parse("Reboot"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},reset:function(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:Ze.parse("FactoryReset"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},download:function(e,t,s){if(!(3===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]||4===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]&&"string"==typeof t[3]))throw new Error("Invalid arguments");const n=[`FileType:${JSON.stringify(t[1]||"")}`,`FileName:${JSON.stringify(t[2]||"")}`,`TargetFileName:${JSON.stringify(t[3]||"")}`].join(",");return s.push({path:Ze.parse(`Downloads.[${n}]`),pathGet:1,pathSet:1,attrGet:null,attrSet:null,defer:!0}),s.push({path:Ze.parse(`Downloads.[${n}].Download`),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},instances:function(e,t,s,n,a){if(3!==t.length||"string"!=typeof t[1])throw new Error("Invalid arguments");let r=Number(t[2]);if(Number.isNaN(r))throw new Error("Invalid arguments");const i=Ze.parse(t[1]);if("+"===t[2][0]||"-"===t[2][0]){if(s.push({path:i,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0}),a===n)return!1;const t=yt(e.deviceData,i,n+1);r=Math.max(0,t.length+r)}return s.push({path:i,pathGet:1,pathSet:r,attrGet:null,attrSet:null,defer:!0}),!0}});function sn(e,t=0){const s={},n=[];let a=!1,r=0;for(const i of e){const e=i[0],o=i[1]>>t,l=e.segments[t];if(l){if(1&o){if(r=1,t>7)continue}else"*"===l&&(a=!0);"*"===l?n.push(i):(s[l]=s[l]||[],s[l].push(i))}else 1&o&&(r=1)}let i=0;!a&&n.length&&(i+=2*sn(n,t+1));for(const e of Object.keys(s)){const a=sn(s[e].concat(n),t+1);i-=a,r+=a}return r+=Math.max(0,i),r}class nn{constructor(){this.lengthIndex=[],this.fragmentIndex=[],this.stringIndex=new Map}get depth(){return this.lengthIndex.length}add(e){if(e.alias)throw new Error("PathSet does not support aliased paths");const t=this.get(e);if(t)return t;for(this.stringIndex.set(e.toString(),e);this.lengthIndex.length<=e.length;)this.lengthIndex.push(new Set),this.lengthIndex.length>1&&this.fragmentIndex.push(new Map);this.lengthIndex[e.length].add(e);for(let t=0;t<e.length;++t){const s=e.segments[t],n=this.fragmentIndex[t];let a=n.get(s);a||(a=new Set,n.set(s,a)),a.add(e)}return e}get(e){return this.stringIndex.get(e.toString())||null}find(e,t=!1,s=!1,n=e.length){if(e.alias)throw new Error("PathSet does not support aliased paths");const a=e.length;if(!(t||n!==a||s&&e.wildcard)){const t=this.get(e);return t?[t]:[]}const r=this.lengthIndex.slice(a,n+1);if(!r.length)return[];let i;for(let n=a-1;n>=0;--n){let a;const r=this.fragmentIndex[n];if(e.wildcard>>n&1){if(s)continue}else t&&(a=r.get("*"));const o=e.segments[n],l=r.get(o);if(l)i=a?i?i.filter((e=>l.has(e)||a.has(e))):[...l,...a]:i?i.filter((e=>l.has(e))):[...l];else{if(!a)return[];i=i?i.filter((e=>a.has(e))):[...a]}if(!i.length)return i}return i=i?i.filter((e=>r.some((t=>t.has(e))))):[].concat(...r.map((e=>[...e]))),i}}const an=Symbol();class rn{constructor(){this._sizeDiff=[0],this._revision=0,this.map=new Map,this.dirty=0}get size(){return this.map.size+this._sizeDiff[this.revision]}get revision(){return this._revision}set revision(e){for(let t=this._sizeDiff.length;t<=e;++t)this._sizeDiff[t]=this._sizeDiff[t-1];this._revision=e}get(e,t=this._revision){const s=this.map.get(e);if(!s)return;const n=s[Math.min(s.length-1,t)];return n!==an?n:void 0}has(e,t=this._revision){const s=this.map.get(e);if(!s)return!1;return s[Math.min(s.length-1,t)]!==an}set(e,t,s=this._revision){let n=this.map.get(e);if(!n){this.dirty|=1<<s;for(let e=0;e<s;++e)this._sizeDiff[e]-=1;n=[];for(let e=0;e<s;++e)n[e]=an;return n[s]=t,this.map.set(e,n),this}if(s<n.length-1)return null;const a=n[n.length-1];this.dirty|=1<<s,a===an&&++this._sizeDiff[s];for(let e=n.length;e<s;++e)n[e]=a;return n[s]=t,this}delete(e,t=this._revision){const s=this.map.get(e);if(!s)return!1;if(t<s.length-1)return null;const n=s[s.length-1];if(n===an)return!1;this.dirty|=1<<t,--this._sizeDiff[t];for(let e=s.length;e<t;++e)s[e]=n;return s[t]=an,!0}getRevisions(e){const t=this.map.get(e);if(!t)return null;const s={};let n=an;for(const[e,a]of t.entries())a!==n&&(a===an?s.delete|=1<<e:s[e]=a,n=a);return s}setRevisions(e,t){const s=t.delete||0,n=Object.keys(t).reduce(((e,t)=>"delete"===t?e:e|1<<+t),s),a=[];let r=an;for(let e=0;n>>e;++e){let n=r;s&1<<e?n=an:e in t&&(n=t[e]),n!==r&&(this.dirty|=1<<e),a[e]=n,r=n}this.map.set(e,a)}getDiff(e){const t=this.map.get(e);if(!t)return[undefined,undefined];let s=t[0];s===an&&(s=undefined);let n=t[t.length-1];return n===an&&(n=undefined),[s,n]}*diff(){for(const[e,t]of this.map){if(1===t.length)continue;let s=t[0],n=t[t.length-1];s===an&&n===an||(s===an&&(s=undefined),n===an&&(n=undefined),yield[e,s,n])}}collapse(e){if(this._sizeDiff.length<=e)return;this._sizeDiff[e]=this._sizeDiff[this._sizeDiff.length-1],this._sizeDiff.splice(e+1,this._sizeDiff.length);const t=this.dirty>>e;this.dirty=this.dirty^t<<e,this.dirty|=+!!t<<e;for(const[t,s]of this.map){const n=s.length-1;if(n<=e)continue;const a=s[n];s.splice(e,n-e),a!==an||s.some((e=>e!==an))||this.map.delete(t)}}}class on{constructor(){this.set=new Set}add(e){this.set.add(e)}delete(e){this.set.delete(e)}superset(e){const t=[];for(const s of this.set){let n=!0;for(const t in e)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort(((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return n.length-s.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0})),t}subset(e){const t=[];for(const s of this.set){let n=!0;for(const t in s)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort(((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return s.length-n.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0})),t}[Symbol.iterator](){return this.set.values()}forEach(e){this.set.forEach(e)}values(){return this.set.values()}clear(){this.set.clear()}get size(){return this.set.size}}const ln=new Set(["xsd:int","xsd:unsignedInt","xsd:boolean","xsd:string","xsd:dateTime","xsd:base64","xsd:hexBinary"]);function cn(){return{paths:new nn,timestamps:new rn,attributes:new rn,trackers:new Map,changes:new Set}}function un(e){return e.timestamp.toString(16)+("0"+e.cycle.toString(16)).slice(-2)+("0"+e.rpcCount.toString(16)).slice(-2)}function fn(e,t){var s;if(!Array.isArray(t))return t;if("PARAM"===t[0]&&"string"==typeof t[1]){let n=t[1];if("id"===n)n="DeviceID.ID";else if("serialNumber"===n)n="DeviceID.SerialNumber";else if("productClass"===n)n="DeviceID.ProductClass";else if("oui"===n)n="DeviceID.OUI";else if("remoteAddress"===n)return ne(e.httpRequest).remoteAddress;const a=e.deviceData,r=a.paths.get(Ze.parse(n));if(r){const e=a.attributes.get(r,1);if(null===(s=null==e?void 0:e.value)||void 0===s?void 0:s[1])return e.value[1][0]}}else if("FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1])return ne(e.httpRequest).remoteAddress;return t}async function pn(e,t){var s;const n=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=n,e.deviceData.attributes.revision=n;const a=t.commandKey,r=e.operations[a];if(!r)return{acsResponse:{name:"TransferCompleteResponse"},operation:null,fault:null};const i=r.args.instance;if(delete e.operations[a],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[a]=1,"0"!==(null===(s=t.faultStruct)||void 0===s?void 0:s.faultCode)){dn(e,r.args.instance);return{acsResponse:{name:"TransferCompleteResponse"},operation:r,fault:{code:`cwmp.${t.faultStruct.faultCode}`,message:t.faultStruct.faultString,detail:t.faultStruct,timestamp:r.timestamp}}}let o=null;const l=e.timestamp+e.iteration+1;let c;if(c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.LastDownload`)),o=xt(e.deviceData,c,l,{value:[l,[r.timestamp,"xsd:dateTime"]]},o),c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.LastFileType`)),o=xt(e.deviceData,c,l,{value:[l,[r.args.fileType,"xsd:string"]]},o),c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.LastFileName`)),o=xt(e.deviceData,c,l,{value:[l,[r.args.fileName,"xsd:string"]]},o),c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.LastTargetFileName`)),o=xt(e.deviceData,c,l,{value:[l,[r.args.targetFileName,"xsd:string"]]},o),c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.StartTime`)),o=xt(e.deviceData,c,l,{value:[l,[+t.startTime,"xsd:dateTime"]]},o),c=e.deviceData.paths.add(Ze.parse(`Downloads.${i}.CompleteTime`)),o=xt(e.deviceData,c,l,{value:[l,[+t.completeTime,"xsd:dateTime"]]},o),o)for(const t of o)St(e.deviceData,t[0],t[1],t[2],t[3]);return{acsResponse:{name:"TransferCompleteResponse"},operation:r,fault:null}}function dn(e,t){var s;const n=e.timestamp+e.iteration+1;let a;a=e.deviceData.paths.add(Ze.parse(`Downloads.${t}.LastDownload`));const r=e.deviceData.attributes.get(a);a=e.deviceData.paths.add(Ze.parse(`Downloads.${t}.Download`));const i=xt(e.deviceData,a,n,{value:[n,[(null===(s=null==r?void 0:r.value[1])||void 0===s?void 0:s[0])||0,"xsd:dateTime"]]});if(i)for(const t of i)St(e.deviceData,t[0],t[1],t[2],t[3])}function mn(e,t,s){const n=2*+Qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,(t=>fn(e,t)));delete e.syncState,delete e.rpcRequest,e.declarations=[],e.provisionsRet=[],e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1),e.revisions=[0],e.extensionsCache={}),e.iteration!==e.cycle*n&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*n),e.channels[t]|=0;for(const n of s){const s=[t],a=JSON.stringify(n);for(const[t,n]of e.provisions.entries())if(JSON.stringify(n)===a){e.provisions.splice(t,1);for(const n of Object.keys(e.channels)){e.channels[n]&1<<t&&s.push(n);const a=e.channels[n]>>t+1;e.channels[n]&=(1<<t)-1,e.channels[n]|=a<<t}}for(const t of s)e.channels[t]|=1<<e.provisions.length;e.provisions.push(n)}}function hn(e){const t=2*+Qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,(t=>fn(e,t)));e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1)),e.iteration!==e.cycle*t&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*t),delete e.syncState,delete e.rpcRequest,e.provisions=[],e.virtualParameters=[],e.channels={},e.declarations=[],e.provisionsRet=[],e.revisions=[0],e.extensionsCache={}}async function gn(e,t,s,n){const a=function(e){const t=Fs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.provisions}(e.cacheSnapshot),r=await Promise.all(t.map((async t=>{if(!a[t[0]]){if(tn[t[0]]){const a=[];let r=!0,i=null;try{r=tn[t[0]](e,t,a,s,n)}catch(e){i={code:`script.${e.name}`,message:e.message,detail:{name:e.name,message:e.message,stack:`${e.name}: ${e.message}\n    at ${t[0]}`}}}return{fault:i,clear:null,declare:a,done:r,returnValue:null}}return null}return Wt(a[t[0]].script,{args:t.slice(1)},e,s,n)})));let i,o=!0,l=[],c=[];for(const e of r)e&&(o=o&&e.done,e.declare&&(l=l.concat(e.declare)),e.clear&&(c=c.concat(e.clear)),i=e.fault||i);if(o)for(const e of l)e.defer=!1;return{fault:i,clear:c,declare:l,done:o,returnValue:null}}async function vn(e,t,s,n){const a=Ys(e.cacheSnapshot),r=await Promise.all(t.map((async t=>{const r={args:t.slice(1)},i=await Wt(a[t[0]].script,r,e,s,n);if(i.done&&!i.fault){if(!i.returnValue)return i.fault={code:"script",message:"Invalid virtual parameter return value"},i;const e={};if(null!=i.returnValue.writable)e.writable=!!i.returnValue.writable;else if(null!=t[1].writable||null!=t[2].writable)return i.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'writable' attribute`},i;if(null!=i.returnValue.value){let t,s;if(Array.isArray(i.returnValue.value)?[t,s]=i.returnValue.value:t=i.returnValue.value,s||(s="number"==typeof t?"xsd:int":"boolean"==typeof t?"xsd:boolean":t instanceof Date?"xsd:datetime":"xsd:string"),null==t||!ln.has(s))return i.fault={code:"script",message:"Invalid virtual parameter value attribute"},i;e.value=wt([t,s])}else if(null!=t[1].value||null!=t[2].value)return i.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'value' attribute`},i;i.returnValue=e}return i})));let i=!0;const o=[];let l,c=[],u=[];for(const e of r)e?(i=i&&e.done,e.declare&&(c=c.concat(e.declare)),e.clear&&(u=u.concat(e.clear)),o.push(e.returnValue),l=e.fault||l):o.push(null);if(i)for(const e of c)e.defer=!1;return{fault:l,clear:u,declare:c,done:i,returnValue:i?o:null}}function wn(e,t){e.syncState||(e.syncState={refreshAttributes:{exist:new Set,object:new Set,writable:new Set,value:new Set,notification:new Set,accessList:new Set},spv:new Map,spa:new Map,gpn:new Set,gpnPatterns:new Map,tags:new Map,virtualParameterDeclarations:[],instancesToDelete:new Map,instancesToCreate:new Map,downloadsToDelete:new Set,downloadsToCreate:new on,downloadsValues:new Map,downloadsDownload:new Map,reboot:0,factoryReset:0});const s=new Map,n=new Map,a=new Map,r=Ys(e.cacheSnapshot);function i(e,t){let s=n.get(e);if(s){s=Object.assign({},s);for(const[e,n]of Object.entries(t))s[e]=Math.max(n,s[e]||0);n.set(e,s)}else n.set(e,t)}function o(e,t,s){let n=a.get(e);n?(n=Object.assign({},n,t),a.set(e,n)):s||a.set(e,t)}for(const n of t){let t,a=n.path;if(a.length){if((1&(a.alias|a.wildcard)||"VirtualParameters"===a.segments[0])&&(e.deviceData.paths.add(Ze.parse("VirtualParameters")),2&(a.alias|a.wildcard))){e.deviceData.paths.add(Ze.parse("VirtualParameters.*"));for(const t of Object.keys(r))e.deviceData.paths.add(Ze.parse(`VirtualParameters.${t}`))}if((1&(a.alias|a.wildcard)||"Reboot"===a.segments[0])&&e.deviceData.paths.add(Ze.parse("Reboot")),(1&(a.alias|a.wildcard)||"FactoryReset"===a.segments[0])&&e.deviceData.paths.add(Ze.parse("FactoryReset")),a.alias){const r=bt(a,n.pathGet||1);for(const t of r){const n=e.deviceData.paths.add(t.path);let a;s.set(n,Math.max(t.pathGet||1,s.get(n)||0)),t.attrGet&&(a=Object.keys(t.attrGet),i(n,t.attrGet)),Ot(e.deviceData,n,"prerequisite",a)}t=yt(e.deviceData,a);for(const e of t)s.set(e,Math.max(n.pathGet||1,s.get(e)||0)),n.attrGet&&i(e,n.attrGet)}else a=e.deviceData.paths.add(a),s.set(a,Math.max(n.pathGet||1,s.get(a)||0)),n.attrGet&&i(a,n.attrGet),Ot(e.deviceData,a,"prerequisite");if(n.attrSet)if(a.alias|a.wildcard){t||(t=yt(e.deviceData,a));for(const e of t)o(e,n.attrSet,n.defer),i(e,{writable:1})}else o(a,n.attrSet,n.defer),i(a,{writable:1});if(null!=n.pathSet){let s,r;Array.isArray(n.pathSet)?(s=n.pathSet[0],r=n.pathSet[1]):s=r=n.pathSet;let o,l=a.slice(0,-1);if(Array.isArray(a.segments[a.length-1])){o={};for(const[e,t]of a.segments[a.length-1])o[e.toString()]=t}else"*"===a.segments[a.length-1]&&(o={});if(l.wildcard||l.alias){const t=yt(e.deviceData,l);for(const l of t){const t=yt(e.deviceData,l.concat(a.slice(-1)));i(l,{writable:1});for(const e of t)i(e,{writable:1});Sn(e,l,t,o,s,r,n.defer)}}else{l=e.deviceData.paths.add(l),t||(t=yt(e.deviceData,a)),i(l,{writable:1});for(const e of t)i(e,{writable:1});Sn(e,l,t,o,s,r,n.defer)}}}}return function(e,t,s,n){const a=e.deviceData,r=e.syncState,i=e.deviceData.paths.add(Ze.parse("")),o=a.paths.find(i,!1,!0,99);o.sort(((e,t)=>e.wildcard===t.wildcard?e.length-t.length:e.wildcard-t.wildcard));const l=[];function c(e,i,o,u){var f;const p=u[0],d=new Map;let m,h,g,v=0,w=0;0===p.wildcard&&(g=a.attributes.get(p));for(const e of u)if(e.length>p.length){const t=e.segments[p.length];let s=d.get(t);if(!s){if(e.length>p.length+1){s=[e.slice(0,p.length+1)]}else s=[];d.set(t,s)}s.push(e)}else if(w=Math.max(w,a.timestamps.get(e)||0),v=Math.max(v,t.get(e)||0),0===p.wildcard){const t=s.get(e);if(t)if(m){m=Object.assign({},m);for(const[e,s]of Object.entries(t))m[e]=Math.max(s,m[e]||0)}else m=t;h=n.get(e)||h}switch(g?(e=p,null!=(i=null===(f=g.object)||void 0===f?void 0:f[1])&&0===i&&(o=Math.max(o,g.object[0]))):o=Math.max(o,w),"*"!==p.segments[0]?p.segments[0]:e.segments[0]){case"Reboot":1===p.length&&(null==h?void 0:h.value)&&(r.reboot=+new Date(h.value[0]));break;case"FactoryReset":1===p.length&&(null==h?void 0:h.value)&&(r.factoryReset=+new Date(h.value[0]));break;case"Tags":2===p.length&&0===p.wildcard&&h&&h.value&&r.tags.set(p,wt([h.value[0],"xsd:boolean"])[0]);break;case"Events":case"DeviceID":break;case"Downloads":3===p.length&&0===p.wildcard&&h&&h.value&&("Download"===p.segments[2]?r.downloadsDownload.set(p,h.value[0]):r.downloadsValues.set(p,h.value[0]));break;case"VirtualParameters":if(p.length<=2){let e;if(v<=w||(e=[p]),0===p.wildcard){if(m)for(const[t,s]of Object.entries(m))g&&g[t]&&s<=g[t][0]||(e||(e=[p]),e[1]||(e[1]={}),e[1][t]=s);h&&(e||(e=[p]),e[2]=h)}e&&l.push(e)}break;default:if(v>w&&v>o)if(p===e)r.refreshAttributes.exist.add(e);else if(i)if(r.gpn.add(e),o>0){const t=1<<e.length;r.gpnPatterns.set(e,t|r.gpnPatterns.get(e))}else{const t=(1<<p.length)-1^(1<<e.length)-1;r.gpnPatterns.set(p,t|r.gpnPatterns.get(p))}else if(r.refreshAttributes.object.add(e),null==i){const t=(1<<r.gpnPatterns.size)-1^(1<<e.length)-1;r.gpnPatterns.set(p,t|r.gpnPatterns.get(p))}if(g){if(m)for(const[e,t]of Object.entries(m))g[e]&&t<=g[e][0]||("value"===e?g.object&&null!=g.object[1]?0===g.object[1]&&r.refreshAttributes.value.add(p):r.refreshAttributes.object.add(p):e in r.refreshAttributes&&r.refreshAttributes[e].add(p));if(h){if(null!=h.value&&r.spv.set(p,h.value),null!=h.notification){const e=r.spa.get(p);e?e.notification=h.notification:r.spa.set(p,{notification:h.notification,accessList:null})}if(null!=h.accessList){const e=r.spa.get(p);e?e.accessList=h.accessList:r.spa.set(p,{notification:null,accessList:h.accessList})}}}}for(let[t,s]of d)if(((p.wildcard^s[0].wildcard)&(1<<p.length)-1)>>e.length==0){if("*"!==t){const e=d.get("*");e&&(s=s.concat(e))}c(e,i,o,s)}}(t.size||s.size||n.size)&&c(i,1,0,o);return l}(e,s,n,a)}async function bn(e,t){var s;if(null!=e.rpcRequest)return{fault:null,rpcId:un(e),rpc:e.rpcRequest};if(!(e.virtualParameters.length||e.declarations.length||(null==t?void 0:t.length)||e.provisions.length))return{fault:null,rpcId:null,rpc:null};if(e.declarations.length<=e.virtualParameters.length){const s=e.declarations.length,n=(e.revisions[s]||0)+1;let a,r;e.deviceData.timestamps.revision=n,e.deviceData.attributes.revision=n,0===s?(a=gn,r=e.provisions):(a=vn,r=e.virtualParameters[s-1]);const{fault:i,clear:o,declare:l,done:c,returnValue:u}=await a(e,r,e.revisions[s-1]||0,e.revisions[s]);if(i)return i.timestamp=e.timestamp,{fault:i,rpcId:null,rpc:null};for(const t of o)if(t[1]>e.timestamp&&(t[1]=e.timestamp),t[2])for(const[s,n]of Object.entries(t[2]))n>e.timestamp&&(t[2][s]=e.timestamp);e.declarations.push(l),e.provisionsRet[s]=s?u:c;for(const t of l)if(t.pathGet>e.timestamp&&(t.pathGet=e.timestamp),t.attrGet)for(const[s,n]of Object.entries(t.attrGet))n>e.timestamp&&(t.attrGet[s]=e.timestamp);if(o)for(const t of o)St(e.deviceData,t[0],t[1],t[2],t[3]);return bn(e,t)}if(null==t?void 0:t.length)return delete e.syncState,e.declarations[0]||(e.declarations[0]=[]),e.declarations[0]=e.declarations[0].concat(t),bn(e,null);if(e.rpcCount>=255)return{fault:{code:"too_many_rpcs",message:"Too many RPC requests",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.revisions.length>=8)return{fault:{code:"deeply_nested_vparams",message:"Virtual parameters are referencing other virtual parameters in a deeply nested manner",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.cycle>=255)return{fault:{code:"too_many_cycles",message:"Too many provision cycles",timestamp:e.timestamp},rpcId:null,rpc:null};const n=2*+Qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,(t=>fn(e,t)));if(e.iteration>=n*(e.cycle+1))return{fault:{code:"too_many_commits",message:"Too many commit iterations",timestamp:e.timestamp},rpcId:null,rpc:null};if(!(e.syncState&&e.syncState.virtualParameterDeclarations&&e.syncState.virtualParameterDeclarations.length>=e.declarations.length)){const t=e.syncState&&e.syncState.virtualParameterDeclarations?e.syncState.virtualParameterDeclarations.length:0;t===e.declarations.length-1&&(e.iteration+=2);let s=wn(e,e.declarations[t]);const n=e.timestamp+e.iteration;let a;const r=Ys(e.cacheSnapshot);if(s=s.filter((t=>{if(Object.keys(r).length){if(1===t[0].length)return e.deviceData.attributes.has(t[0])||(a=xt(e.deviceData,t[0],n,{object:[n,1],writable:[n,0]},a)),!1;if(2===t[0].length){if("*"===t[0].segments[1]){for(const t of Object.keys(r))a=xt(e.deviceData,Ze.parse(`VirtualParameters.${t}`),n,{object:[n,0]},a);return a=xt(e.deviceData,t[0],n,null,a),!1}if(r[t[0].segments[1]])return e.deviceData.attributes.has(t[0])||(a=xt(e.deviceData,t[0],n,{object:[n,0]},a)),!0}}for(const s of e.deviceData.paths.find(t[0],!1,!0))if(e.deviceData.attributes.has(s)){a||(a=[]),a.push([t[0],n]);break}return!1})),a)for(const t of a)St(e.deviceData,t[0],t[1],t[2],t[3]);return e.syncState.virtualParameterDeclarations[t]=s,bn(e,null)}if(!e.syncState)return{fault:null,rpcId:null,rpc:null};const a=e.declarations.length-1;let r=function(e,t){let s;if(t)for(const n of t)if(n[1]){const t={},a={},r={},i=e.deviceData.attributes.get(n[0])||{};for(const[e,t]of Object.entries(n[1]))"value"!==e&&"writable"!==e||(!i[e]||t>i[e][0])&&(r[e]=t);for(const[e,s]of Object.entries(i))t[e]=s[0],a[e]=s[1];Object.keys(r).length&&(s||(s=[]),s.push([n[0].segments[1],r,{},t,a]))}return s}(e,e.syncState.virtualParameterDeclarations[a]);if(!r&&(e.rpcRequest=function(e){var t;const s=e.syncState;if(!s)return null;for(const t of s.refreshAttributes.exist){let n=!1;for(const a of e.deviceData.paths.find(t,!1,!0,99))if(s.refreshAttributes.value.has(a)||s.refreshAttributes.object.has(a)||s.refreshAttributes.writable.has(a)||s.refreshAttributes.notification.has(a)||s.refreshAttributes.accessList.has(a)||s.gpn.has(a)){n=!0;break}if(!n){const n=e.deviceData.paths.add(t.slice(0,-1));s.gpn.add(n);const a=1<<n.length;s.gpnPatterns.set(n,a|s.gpnPatterns.get(n))}}s.refreshAttributes.exist.clear();for(const t of s.refreshAttributes.object){let n=!1;for(const a of e.deviceData.paths.find(t,!1,!0,99))if(s.refreshAttributes.value.has(a)||a.length>t.length&&(s.refreshAttributes.object.has(a)||s.refreshAttributes.writable.has(a)||s.refreshAttributes.notification.has(a)||s.refreshAttributes.accessList.has(a))){n=!0;break}if(!n){const n=e.deviceData.paths.add(t.slice(0,-1));s.gpn.add(n);const a=1<<n.length;s.gpnPatterns.set(n,a|s.gpnPatterns.get(n))}}s.refreshAttributes.object.clear();for(const t of s.refreshAttributes.writable){const n=e.deviceData.paths.add(t.slice(0,-1));s.gpn.add(n);const a=1<<n.length;s.gpnPatterns.set(n,a|s.gpnPatterns.get(n))}if(s.refreshAttributes.writable.clear(),s.gpn.size){const t=Qs(e.cacheSnapshot,"cwmp.gpnNextLevel",{},e.timestamp,(t=>fn(e,t))),n=Array.from(s.gpn.keys()).sort(((e,t)=>t.length-e.length));let a=n.pop();if(a&&!a.length){!!Qs(e.cacheSnapshot,"cwmp.skipRootGpn",{},e.timestamp,(t=>fn(e,t)))&&(a=n.pop())}for(;a&&a.length&&!e.deviceData.attributes.has(a);)s.gpn.delete(a),a=n.pop();if(a){let n,r=0;if(a.length>=t){const t=[[a,0]];for(const n of e.deviceData.paths.find(a,!0,!1,99)){const e=s.gpnPatterns.get(n);e&&t.push([n,e>>a.length<<a.length])}r=sn(t)}if(r<Math.pow(2,Math.max(0,8-a.length)))n=!0,s.gpn.delete(a);else{n=!1;for(const t of e.deviceData.paths.find(a,!1,!0,99))s.gpn.delete(t)}return{name:"GetParameterNames",parameterPath:a.length?a.toString()+".":"",nextLevel:n}}}if(s.refreshAttributes.value.size){const n=Qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,(t=>fn(e,t))),a=[];for(const r of s.refreshAttributes.value){s.refreshAttributes.value.delete(r);const i=e.deviceData.attributes.get(r);if(0===(null===(t=null==i?void 0:i.object)||void 0===t?void 0:t[1])&&(a.push(r.toString()),a.length>=n))break}if(a.length)return{name:"GetParameterValues",parameterNames:a}}if(s.refreshAttributes.notification.size||s.refreshAttributes.accessList.size){const t=Qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,(t=>fn(e,t))),n=[];for(const a of s.refreshAttributes.notification){s.refreshAttributes.notification.delete(a),s.refreshAttributes.accessList.delete(a);if(e.deviceData.attributes.get(a)&&(n.push(a.toString()),n.length>=t))break}if(n.length<t)for(const a of s.refreshAttributes.accessList){s.refreshAttributes.accessList.delete(a);if(e.deviceData.attributes.get(a)&&(n.push(a.toString()),n.length>=t))break}if(n.length)return{name:"GetParameterAttributes",parameterNames:n}}return null}(e),!e.rpcRequest)){if(e.deviceData.changes.has("prerequisite"))return delete e.syncState,function(e,t){if(Array.isArray(t)){for(const s of e.trackers.values())for(const e of t)delete s[e];for(const s of t)e.changes.delete(s)}else{for(const s of e.trackers.values())delete s[t];e.changes.delete(t)}}(e.deviceData,"prerequisite"),bn(e,null);let t;const n=e.timestamp+e.iteration+1;for(const[s,a]of e.syncState.tags){const r=e.deviceData.attributes.get(s);a&&!r?t=xt(e.deviceData,s,n,{object:[n,0],writable:[n,1],value:[n,[!0,"xsd:boolean"]]},t):r&&!a&&(t=xt(e.deviceData,s,n,null,t))}let i;for(const s of e.syncState.downloadsToCreate){if(null==i){i=0;for(const t of e.deviceData.paths.find(Ze.parse("Downloads.*"),!1,!0))+t.segments[1]>i&&e.deviceData.attributes.has(t)&&(i=+t.segments[1])}++i,t=xt(e.deviceData,Ze.parse("Downloads"),n,{object:[n,1],writable:[n,1]},t),t=xt(e.deviceData,Ze.parse(`Downloads.${i}`),n,{object:[n,1],writable:[n,1]},t);const a={FileType:{writable:1,value:[s.FileType||"","xsd:string"]},FileName:{writable:1,value:[s.FileName||"","xsd:string"]},TargetFileName:{writable:1,value:[s.TargetFileName||"","xsd:string"]},Download:{writable:1,value:[s.Download||0,"xsd:dateTime"]},LastFileType:{writable:0,value:["","xsd:string"]},LastFileName:{writable:0,value:["","xsd:string"]},LastTargetFileName:{writable:0,value:["","xsd:string"]},LastDownload:{writable:0,value:[0,"xsd:dateTime"]},StartTime:{writable:0,value:[0,"xsd:dateTime"]},CompleteTime:{writable:0,value:[0,"xsd:dateTime"]}};for(const[s,r]of Object.entries(a))t=xt(e.deviceData,Ze.parse(`Downloads.${i}.${s}`),n,{object:[n,0],writable:[n,r.writable],value:[n,r.value]},t);t=xt(e.deviceData,Ze.parse(`Downloads.${i}.*`),n,null,t)}e.syncState.downloadsToCreate.clear();for(const s of e.syncState.downloadsToDelete){t=xt(e.deviceData,s,n,null,t);for(const t of e.syncState.downloadsValues.keys())t.segments[1]===s.segments[1]&&e.syncState.downloadsValues.delete(t)}e.syncState.downloadsToDelete.clear();for(const[a,r]of e.syncState.downloadsValues){const i=e.deviceData.attributes.get(a);if(i&&(null===(s=i.writable)||void 0===s?void 0:s[1])&&i.value){const s=wt([r,i.value[1][1]]);s[0]!==i.value[1][0]&&(t=xt(e.deviceData,a,n,{value:[n,s]},t))}}if(t||e.deviceData.changes.has("prerequisite")){if(t)for(const s of t)St(e.deviceData,s[0],s[1],s[2],s[3]);return bn(e,null)}r=function(e,t){var s;let n;if(t)for(const a of t)if(null!=(null===(s=a[2])||void 0===s?void 0:s.value)){const t=e.deviceData.attributes.get(a[0]);if(t&&t.writable&&t.writable[1]&&t.value&&null!=t.value[1]){const e=a[2].value.slice();if(null==e[1]&&(e[1]=t.value[1][1]),wt(e),e[0]!==t.value[1][0]||e[1]!==t.value[1][1]){n||(n=[]);const s={},r={};for(const[e,n]of Object.entries(t))s[e]=n[0],r[e]=n[1];n.push([a[0].segments[1],{},{value:e},s,r])}}}return n}(e,e.syncState.virtualParameterDeclarations[a]),r||(e.rpcRequest=function(e){var t,s,n,a,r,i,o,l;const c=e.syncState;if(!c)return null;const u=e.deviceData,f=!!Qs(e.cacheSnapshot,"cwmp.skipWritableCheck",{},e.timestamp,(t=>fn(e,t))),p=e=>f||e.writable&&!!e.writable[1];for(const t of c.instancesToDelete.values())for(const s of t){const n=e.deviceData.attributes.get(s);if(n&&p(n))return t.delete(s),{name:"DeleteObject",objectName:s.toString()+"."}}for(const[t,s]of c.instancesToCreate){const n=e.deviceData.attributes.get(t);if(n&&p(n)){const e=s.values().next().value;if(e)return s.delete(e),{name:"AddObject",objectName:t.toString()+".",instanceValues:e,next:"getInstanceKeys"}}}const d=Qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,(t=>fn(e,t))),m=!!Qs(e.cacheSnapshot,"cwmp.datetimeMilliseconds",{},e.timestamp,(t=>fn(e,t))),h=!!Qs(e.cacheSnapshot,"cwmp.booleanLiteral",{},e.timestamp,(t=>fn(e,t))),g=[];for(const[s,n]of c.spv){c.spv.delete(s);const a=e.deviceData.attributes.get(s),r=null===(t=a.value)||void 0===t?void 0:t[1];if(r&&p(a)){const e=n.slice();if(e[1]||(e[1]=r[1]),wt(e),"xsd:dateTime"!==e[1]||m||"number"!=typeof e[0]||(e[0]-=e[0]%1e3),e[0]===r[0]&&e[1]===r[1]||g.push([s.toString(),e[0],e[1]]),g.length>=d)break}}if(g.length)return{name:"SetParameterValues",parameterList:g,DATETIME_MILLISECONDS:m,BOOLEAN_LITERAL:h};const v=[];for(const[t,s]of c.spa){c.spa.delete(t);const n=e.deviceData.attributes.get(t);if(null==s.notification||n.notification&&s.notification!==n.notification[1]||(s.notification=null),null==s.accessList||n.accessList&&!yn(s.accessList,n.accessList[1])||(s.accessList=null),null==s.notification&&null==s.accessList||v.push([t.toString(),s.notification,s.accessList]),v.length>=d)break}if(v.length)return{name:"SetParameterAttributes",parameterList:v};for(const[t,o]of c.downloadsDownload){if(!(o>0&&o<=e.timestamp))continue;const l=u.attributes.get(t);if(!(o<=(null===(n=null===(s=null==l?void 0:l.value)||void 0===s?void 0:s[1])||void 0===n?void 0:n[0]))){const s=u.attributes.get(u.paths.get(t.slice(0,-1).concat(Ze.parse("FileType")))),n=u.attributes.get(u.paths.get(t.slice(0,-1).concat(Ze.parse("FileName")))),o=u.attributes.get(u.paths.get(t.slice(0,-1).concat(Ze.parse("TargetFileName"))));return{name:"Download",commandKey:un(e),instance:t.segments[1],fileType:null===(a=null==s?void 0:s.value)||void 0===a?void 0:a[1][0],fileName:null===(r=null==n?void 0:n.value)||void 0===r?void 0:r[1][0],targetFileName:null===(i=null==o?void 0:o.value)||void 0===i?void 0:i[1][0]}}}if(c.reboot>0&&c.reboot<=e.timestamp){const t=e.deviceData.paths.get(Ze.parse("Reboot")),s=t?e.deviceData.attributes.get(t):null;if(!((null===(o=null==s?void 0:s.value)||void 0===o?void 0:o[1][0])>=c.reboot))return delete c.reboot,{name:"Reboot"}}if(c.factoryReset>0&&c.factoryReset<=e.timestamp){const t=e.deviceData.paths.get(Ze.parse("FactoryReset")),s=t?e.deviceData.attributes.get(t):null;if(!((null===(l=null==s?void 0:s.value)||void 0===l?void 0:l[1][0])>=c.factoryReset))return delete c.factoryReset,{name:"FactoryReset"}}return null}(e))}if(r)return e.virtualParameters.push(r),e.revisions.push(e.revisions[a]),bn(e,null);if(e.rpcRequest)return{fault:null,rpcId:un(e),rpc:e.rpcRequest};++e.revisions[a],e.declarations.pop(),e.syncState.virtualParameterDeclarations.pop();const i=e.provisionsRet.splice(a)[0];if(!i)return bn(e,null);e.revisions.pop();const o=e.revisions[e.revisions.length-1]||0;e.deviceData.timestamps.collapse(o+1),e.deviceData.attributes.collapse(o+1),e.deviceData.timestamps.revision=o+1,e.deviceData.attributes.revision=o+1;for(const t of Object.keys(e.extensionsCache))o<Number(t.split(":",1)[0])&&delete e.extensionsCache[t];const l=e.virtualParameters.pop();if(!l)return{fault:null,rpcId:null,rpc:null};const c=e.timestamp+e.iteration;let u;for(const[t,s]of i.entries()){for(const[e,n]of Object.entries(s))s[e]=[c+(null!=l[t][2][e]?1:0),n];u=xt(e.deviceData,Ze.parse(`VirtualParameters.${l[t][0]}`),c,s,u)}if(u)for(const t of u)St(e.deviceData,t[0],t[1],t[2],t[3]);return bn(e,null)}function yn(e,t){if(e.length!==t.length)return!1;for(const[s,n]of e.entries())if(n!==t[s])return!1;return!0}function Sn(e,t,s,n,a,r,i){let o,l;if("Downloads"===(t=e.deviceData.paths.add(t)).segments[0]){if(1!==t.length)return;l=e.syncState.downloadsToDelete,o=e.syncState.downloadsToCreate}else l=e.syncState.instancesToDelete.get(t),null==l&&(l=new Set,e.syncState.instancesToDelete.set(t,l)),o=e.syncState.instancesToCreate.get(t),null==o&&(o=new on,e.syncState.instancesToCreate.set(t,o));if(i&&0===o.size&&0===l.size)return;let c=0;for(const e of s)++c,c>r?l.add(e):c<=a&&l.delete(e);if(n){for(const e of o.superset(n))++c,c>r&&o.delete(e);for(const e of o.subset(n))++c,c<=a&&(o.delete(e),o.add(JSON.parse(JSON.stringify(n))));for(;c<a;)++c,o.add(JSON.parse(JSON.stringify(n)))}}async function _n(e){const t=JSON.parse(e);for(const e of t.declarations)for(const t of e)t.path=Ze.parse(t.path);const s=cn();for(const e of t.deviceData){const t=s.paths.add(Ze.parse(e[0]));e[1]&&s.trackers.set(t,e[1]),e[2]&&(s.timestamps.setRevisions(t,e[2]),e[3]&&s.attributes.setRevisions(t,e[3]))}return t.deviceData=s,await Zs(),t}const xn=new Set(["true","True","TRUE","false","False","FALSE","null","Null","NULL"]);function On(e){return!/[^\t\n\x20-\x7e\x85\u{a0}-\u{d7ff}\u{e000}-\u{fffd}\u{10000}-\u{10ffff}]/u.test(e)}function Nn(e){return e&&On(e)?/^[\s-?:,[\]{}#&$!|>'"%@`]|: | #|[\n,[\]{}]|\s$/.test(e)?JSON.stringify(e):e:JSON.stringify(e)}function Rn(e,t,s="",n=""){if(null==e)return void t.push(`${s}null`);if("number"==typeof e||"boolean"==typeof e)return void t.push(`${s}${JSON.stringify(e)}`);if(e instanceof Date)return void t.push(`${s}${e.toJSON()}`);if("string"==typeof e)return void function(e,t,s,n){if(/^\s*$/.test(e)||xn.has(e)||!On(e))return void t.push(s+JSON.stringify(e));n||(n="  ");const a=e.split("\n");if(a.length>1){let r="",i="-";if((a.find((e=>e))||"").startsWith(" ")&&(r=`${"  ".length}`),a[a.length-1]||(a.pop(),i=a[a.length-1]?"":"+"),/^\s+$/.test(a[a.length-1]))return void t.push(s+JSON.stringify(e));let o=!1;const l=a.map((e=>{const t=function(e){if(e.length<=80)return[e];if(e.startsWith(" "))return[e];const t=[];let s=0,n=0;for(let a=1;a<e.length-1;++a){if(" "!==e[a])continue;if(" "===e[a+1]){for(a+=2;" "===e[a];)++a;continue}if(a<=s+80){n=a;continue}const r=n>s?n:a;t.push(e.slice(s,r)),s=r+1,n=a}return n>s&&e.length>s+80&&(t.push(e.slice(s,n)),s=n+1),t.push(e.slice(s)),t}(e);return t.length>1&&(o=!0),t}));if(!o)return void t.push(`${s}|${r}${i}`,...a.map((e=>e?n+e:e)));t.push(`${s}>${r}${i}`),t.push(...l[0].map((e=>n+e)));for(let e=1;e<l.length;++e)l[e-1][0]&&!l[e-1][0].startsWith(" ")&&t.push(""),t.push(...l[e].map((e=>n+e)))}else/^[\s-?:,[\]{}#&$!|>'"%@`]|: | #|\s$/.test(e)||parseFloat(e)===+e?t.push(s+JSON.stringify(e)):t.push(s+e)}(e,t,s,n);if(Array.isArray(e)){if(!e.length)return void t.push(s+"[]");if(!s||s.endsWith("- ")){Rn(e[0],t,s+"- ",n+"  "),s=n+"- ",n+="  ";for(let a=1;a<e.length;++a)Rn(e[a],t,s,n)}else{t.push(s),s=n+"- ",n+="  ";for(let a=0;a<e.length;++a)Rn(e[a],t,s,n)}return}const a=Object.entries(e).filter((e=>void 0!==e[1]));if(a.length)if(!s||s.endsWith("- ")){Rn(a[0][1],t,s+`${Nn(a[0][0])}: `,n+"  "),s=n,n+="  ";for(let e=1;e<a.length;++e)Rn(a[e][1],t,s+`${Nn(a[e][0])}: `,n)}else{t.push(s),s=n,n+="  ";for(let e=0;e<a.length;++e)Rn(a[e][1],t,s+`${Nn(a[e][0])}: `,n)}else t.push(s+"{}")}function Dn(e){if(void 0===e)return;const t=[];return Rn(e,t),t.join("\n")+"\n"}const Tn=""+J("DEBUG_FILE"),An=""+J("DEBUG_FORMAT"),Cn=new WeakMap;function En(e){let t=Cn.get(e);return t||(t=new Date,Cn.set(e,t)),t}function In(e,s,n){if(!Tn)return;const a=new Date,r=e.socket,i=Q(r),o={event:"incoming HTTP request",timestamp:a,remoteAddress:i.remoteAddress,deviceId:s,connection:En(r),localPort:i.localPort,method:e.method,url:e.url,headers:e.headers,body:n};if("yaml"===An)t.appendFileSync(Tn,"---\n"+Dn(o));else{if("json"!==An)throw new Error("Unrecognized DEBUG_FORMAT option");t.appendFileSync(Tn,JSON.stringify(o)+"\n")}}function $n(e,s,n){if(!Tn)return;const a=new Date,r=e.socket,i={event:"outgoing HTTP response",timestamp:a,remoteAddress:Q(r).remoteAddress,deviceId:s,connection:En(r),statusCode:e.statusCode,headers:e.getHeaders(),body:n};if("yaml"===An)t.appendFileSync(Tn,"---\n"+Dn(i));else{if("json"!==An)throw new Error("Unrecognized DEBUG_FORMAT option");t.appendFileSync(Tn,JSON.stringify(i)+"\n")}}const Ln=w.promisify(T.gzip),kn=w.promisify(T.deflate),Pn=+J("MAX_CONCURRENT_REQUESTS"),jn=new WeakMap,Mn=new WeakMap,Fn={concurrentRequests:0,totalRequests:0,droppedRequests:0,initiatedSessions:0};async function qn(e,t){const s=function(e,t){const s=Fs.get(e);if(!s)throw new Error("Cache snapshot does not exist");return s.config[t]}(e.cacheSnapshot,"cwmp.auth");if(null==s)return!0;let n;if(e.httpRequest.headers.authorization)try{n=$e(e.httpRequest.headers.authorization)}catch(e){return!1}if("Digest"===(null==n?void 0:n.method)){const s=Mn.get(e.httpRequest.socket);if(!s||n.nonce!==s||n.qop&&(!n.cnonce||!n.nc))return!1;n.body=t}const a=await As(s,{},e.timestamp,(async t=>{if(t=fn(e,t),Array.isArray(t)&&"FUNC"===t[0]){if("EXT"===t[1]){if("string"!=typeof t[2]||"string"!=typeof t[3])return null;for(let e=4;e<t.length;e++)if(Array.isArray(t[e]))return null;const{fault:e,value:s}=await Tt(t.slice(2));return e?null:s}if("AUTH"===t[1]){const e=t[2],s=t[3];if(null!=e&&null!=s&&n){if("Basic"===n.method)return n.username===t[2]&&n.password===t[3];if("Digest"===n.method){const t=function(e,t,s,n,a,r,i,o,c,u){const f=l.createHash("md5");f.update(e).update(":").update(t).update(":").update(s);const p=f.digest("hex"),d=l.createHash("md5");if(d.update(a).update(":").update(r),"auth-int"===i){const e=l.createHash("md5").update(o||"").digest("hex");d.update(":").update(e)}const m=d.digest("hex"),h=l.createHash("md5");return h.update(p).update(":").update(n),i&&h.update(":").update(u).update(":").update(c).update(":").update(i),h.update(":").update(m),h.digest("hex")}(e,"GenieACS",s,n.nonce,"POST",n.uri,n.qop,n.body,n.cnonce,n.nc);return t===n.response}}return!1}}return t}));return!(!a||Array.isArray(a))}async function Un(e,t,s=!1){s&&(t.headers.Connection="close");let n=t.data;if(e.httpRequest.headers["content-encoding"]&&t.data.length>0)switch(e.httpRequest.headers["content-encoding"]){case"gzip":t.headers["Content-Encoding"]="gzip",n=await Ln(n);break;case"deflate":t.headers["Content-Encoding"]="deflate",n=await kn(n)}const a=e.httpResponse,r=e.httpRequest.socket;if(a.setHeader("Content-Length",Buffer.byteLength(n)),a.writeHead(t.code,t.headers),e.debug&&$n(a,e.deviceId,t.data),a.end(n),r.destroyed)Re({sessionContext:e,message:"Connection dropped"}),await Jn(e);else if(s)hn(e),await Jn(e);else{const t=Date.now();if(e.lastActivity=t,jn.set(r,e),t>=e.extendLock){e.extendLock=t+1e4;if(!await vs(`cwmp_session_${e.deviceId}`,1e3*e.timeout+15e3,0,e.sessionId))throw new Error("Failed to extend lock")}}}function Vn(e,t,s,n){s||(s=e.provisions,n=e.channels);const a=Object.keys(n);if(!a.length)throw new Error("Fault not associated with a channel!");const r=e.faults;for(const s of a){const i=e.faults[s]?e.faults[s].provisions:[];if(r[s]=Object.assign({provisions:i,timestamp:e.timestamp},t),s.startsWith("task_")){const t=s.slice(5);for(const n of e.tasks)n._id===t&&n.expiry&&(r[s].expiry=n.expiry)}null!=e.retries[s]?++e.retries[s]:(e.retries[s]=0,1!==a.length&&(r[s].retryNow=!0)),0===n[s]&&(r[s].precondition=!0),e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0,Ne({sessionContext:e,message:"Channel has faulted",fault:t,channel:s,retries:e.retries[s]})}for(let e=0;e<s.length;++e)for(const t of a)n[t]>>e&1&&r[t].provisions.push(s[e]);for(const e of a){const t=r[e].provisions;r[e].provisions=[],Wn(r[e].provisions,t)}hn(e)}async function Gn(e,t){const s=await async function(e,t){const s=e.timestamp+e.iteration+1,n=[[Ze.parse("DeviceID.Manufacturer"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.Manufacturer,"xsd:string"]]}],[Ze.parse("DeviceID.OUI"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.OUI,"xsd:string"]]}],[Ze.parse("DeviceID.ProductClass"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.ProductClass,"xsd:string"]]}],[Ze.parse("DeviceID.SerialNumber"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.SerialNumber,"xsd:string"]]}]];for(const e of t.parameterList){const t=e[0];n.push([t,s,{object:[s,0],value:[s,e.slice(1)]}])}n.push([Ze.parse("Events.Inform"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);for(const a of t.event)n.push([Ze.parse(`Events.${a.replace(/\s+/g,"_")}`),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);e.new&&(n.push([Ze.parse("DeviceID.ID"),s,{object:[s,0],writable:[s,0],value:[s,[e.deviceId,"xsd:string"]]}]),n.push([Ze.parse("Events.Registered"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}])),e.deviceData.timestamps.revision=1,e.deviceData.attributes.revision=1;let a=null;for(const t of n)"Events"===t[0].segments[0]?xt(e.deviceData,t[0],t[1],t[2]):a=xt(e.deviceData,t[0],t[1],t[2],a);if(a)for(const t of a)St(e.deviceData,t[0],t[1],t[2],t[3]);return{name:"InformResponse"}}(e,t.cpeRequest),n=gt({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}),a=Qs(e.cacheSnapshot,"cwmp.cookiesPath",{},e.timestamp,(t=>fn(e,t)));return n.headers["Set-Cookie"]=a?`session=${e.sessionId}; Path=${a}`:`session=${e.sessionId}`,n}function Wn(e,t){let s=!1;const n=new WeakMap;for(const t of e)n.set(t,JSON.stringify(t));for(let a=t.length-1;a>=0;--a){let r=t[a];const i=JSON.stringify(r);for(let o=e.length-1;o>=0;--o){i===n.get(e[o])&&(!r||o>=e.length-(t.length-a)?r=null:(e.splice(o,1),s=!0))}r&&(e.splice(e.length-(t.length-a)+1,0,r),n.set(r,i),s=!0)}return s}async function Bn(e){var t;const s=e.deviceData,n=function(e){const t=Fs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.presets}(e.cacheSnapshot),a={};let r=null,i=null;const o=+Qs(e.cacheSnapshot,"cwmp.retryDelay",{},e.timestamp,(t=>fn(e,t)));if(e.faults)for(const[t,s]of Object.entries(e.faults)){let n=0;if(s.retryNow||(n=s.timestamp+o*Math.pow(2,e.retries[t])*1e3),n<=e.timestamp){r=t,i=s.provisions;break}a[t]=s.precondition?1:2}s.timestamps.revision=1,s.attributes.revision=1;const l={};for(const t of s.paths.find(Ze.parse("Events.*"),!1,!0)){const n=s.attributes.get(t);(null==n?void 0:n.value)&&n.value[1][0]>=e.timestamp&&(l[t.segments[1]]=!0)}const c={},u=[];for(const s of n){if(null!=r){if(s.channel!==r)continue}else if(1===a[s.channel])continue;let n=!0;for(const[e,t]of Object.entries(s.events))if(!t!=!l[e.replace(/\s+/g,"_")]){n=!1;break}if(n){if(null===(t=s.schedule)||void 0===t?void 0:t.schedule){if(!(Lt(e.timestamp,s.schedule.schedule)[0]+s.schedule.duration>e.timestamp))continue}u.push(s);for(const t of Cs(Ts(s.precondition,null,e.timestamp)))e.channels[s.channel]=0,"string"==typeof t&&(c[t]=Ze.parse(t));for(const t of s.provisions)for(const n of t.slice(1))for(const t of Cs(Ts(n,null,e.timestamp)))e.channels[s.channel]=0,"string"==typeof t&&(c[t]=Ze.parse(t))}}const f=Object.values(c).map((e=>({path:e,pathGet:1,pathSet:null,attrGet:{value:1},attrSet:null,defer:!0}))),{fault:p,rpcId:d,rpc:m}=await bn(e,f);if(p)return Vn(e,p),hn(e),Bn(e);if(m)return Kn(e,d,m);hn(e),null!=r&&mn(e,r,i);const h={};for(const t of u)if(Ts(t.precondition,{},e.timestamp,(t=>fn(e,t)))){const s=t.provisions.map((t=>[t[0],...t.slice(1).map((t=>Ts(t,{},e.timestamp,(t=>fn(e,t)))))]));2===a[t.channel]?h[t.channel]=(h[t.channel]||[]).concat(s):mn(e,t.channel,s)}for(const[t,s]of Object.entries(h))Wn(e.faults[t].provisions,s)&&(e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null==r&&(e.presetCycles=(e.presetCycles||0)+1),e.presetCycles>4){const t={code:"preset_loop",message:"The presets are stuck in an endless configuration loop",timestamp:e.timestamp};Vn(e,t);for(const t of Object.values(e.faults))delete t.retryNow;return hn(e),Kn(e)}s.timestamps.dirty=0,s.attributes.dirty=0;const{fault:g,rpcId:v,rpc:w}=await bn(e,null);if(g)return Vn(e,g),hn(e),Bn(e);if(!w){for(const t of Object.keys(e.channels))e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null!=r)return Bn(e);if(e.deviceData.timestamps.dirty>1||e.deviceData.attributes.dirty>1)return Bn(e)}return Kn(e,v,w)}async function zn(e){const{fault:t,rpcId:s,rpc:n}=await bn(e,null);if(t)return Vn(e,t),hn(e),zn(e);if(n)return Kn(e,s,n);for(const[t,s]of Object.entries(e.channels))if(s&&e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0),t.startsWith("task_")){const s=t.slice(5);e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(s);for(let t=0;t<e.tasks.length;++t)if(e.tasks[t]._id===s){e.tasks.splice(t,1);break}}hn(e),e.tasks=e.tasks.filter((t=>{if(!(t.expiry<=e.timestamp))return!0;Oe({sessionContext:e,message:"Task expired",task:t}),e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(t._id);const s=`task_${t._id}`;return e.faults[s]&&(delete e.faults[s],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0),!1}));const a=e.tasks.find((t=>!e.faults[`task_${t._id}`]));if(!a)return Bn(e);let r;switch(a.name){case"getParameterValues":e.channels[`task_${a._id}`]=0;for(const t of a.parameterNames)mn(e,`task_${a._id}`,[["refresh",t]]);break;case"setParameterValues":e.channels[`task_${a._id}`]=0;for(const t of a.parameterValues)mn(e,`task_${a._id}`,[["value",t[0],t[1]]]);break;case"refreshObject":mn(e,`task_${a._id}`,[["refresh",a.objectName]]);break;case"reboot":mn(e,`task_${a._id}`,[["reboot"]]);break;case"factoryReset":mn(e,`task_${a._id}`,[["reset"]]);break;case"download":mn(e,`task_${a._id}`,[["download",a.fileType,a.fileName,a.targetFileName||""]]);break;case"addObject":r=(a.parameterValues||[]).map((e=>`${e[0]}:${JSON.stringify(e[1])}`)).join(","),mn(e,`task_${a._id}`,[["instances",`${a.objectName}.[${r}]`,"+1"]]);break;case"deleteObject":mn(e,`task_${a._id}`,[["instances",a.objectName,0]]);break;case"provisions":mn(e,`task_${a._id}`,a.provisions);break;default:e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(a._id),e.tasks=e.tasks.filter((e=>e!==a)),Ne({sessionContext:e,message:"Invalid task",taskId:a._id})}return zn(e)}async function Jn(e){var t;let s=null!=e.cacheUntil;if(e.provisions.length){Vn(e,{code:"session_terminated",message:"The TR-069 session was unsuccessfully terminated",timestamp:e.timestamp});for(const t of Object.values(e.faults))delete t.retryNow}const n=[];if(n.push(as(e.deviceId,e.deviceData,e.new,e.timestamp)),e.operationsTouched)for(const t of Object.keys(e.operationsTouched))s=!0,e.operations[t]?n.push(us(e.deviceId,t,e.operations[t])):n.push(fs(e.deviceId,t));if((null===(t=e.doneTasks)||void 0===t?void 0:t.length)&&(s=!0,n.push(async function(e,t){await Yt.tasks.deleteMany({_id:{$in:t.map((e=>new m.ObjectId(e)))}})}(e.deviceId,e.doneTasks))),e.faultsTouched)for(const t of Object.keys(e.faultsTouched))s=!0,e.faults[t]?(e.faults[t].retries=e.retries[t],n.push(is(e.deviceId,t,e.faults[t]))):n.push(os(e.deviceId,t));s&&n.push(async function(e,t,s,n,a){const r={tasks:null,faults:null,operations:null};t.length&&(r.tasks=t);Object.keys(s).length&&(r.faults=s);Object.keys(n).length&&(r.operations=n);let i;i=a?Math.trunc((Date.now()-a)/1e3):J("MAX_CACHE_TTL",e);await hs(`${e}_tasks_faults_operations`,JSON.stringify(r),i)}(e.deviceId,e.tasks,e.faults,e.operations,e.cacheUntil)),await Promise.all(n),await ws(`cwmp_session_${e.deviceId}`,e.sessionId),e.new&&Oe({sessionContext:e,message:"New device registered"})}async function Kn(e,t,s){if(!s)return Un(e,gt(null),!0);if("Download"===s.name&&(s.fileSize=0,!s.url)){let t=""+J("FS_URL_PREFIX");if(!t){const s=+J("FS_PORT"),n=!!J("FS_SSL_CERT"),a=ne(e.httpRequest);let r=a.localAddress;a.host&&([r]=a.host.split(":",1)),t=(n?"https":"http")+`://${r}:${s}/`}s.url=t+encodeURI(s.fileName);const n=function(e){const t=Fs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.files}(e.cacheSnapshot);n[s.fileName]&&(s.fileSize=n[s.fileName].length)}const n={id:t,acsRequest:s,cwmpVersion:e.cwmpVersion};Oe({sessionContext:e,message:"ACS request",rpc:n});return Un(e,gt(n))}async function Hn(e){Re({message:"Bad session state",sessionContext:e});const t=e.httpResponse,s="Bad session state";if(t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),e.debug&&$n(t,e.deviceId,s),t.end(s),e.state)return Jn(e)}async function Xn(e,t){const s={};if(t)Re({message:"Authentication failure",sessionContext:e}),s.Connection="close";else{if(ne(e.httpRequest).encrypted)s["WWW-Authenticate"]='Basic realm="GenieACS"';else{const t=A.randomBytes(16).toString("hex");Mn.set(e.httpRequest.socket,t);let n='Digest realm="GenieACS"';n+=',qop="auth,auth-int"',n+=`,nonce="${t}"`,s["WWW-Authenticate"]=n}jn.set(e.httpRequest.socket,e)}const n=e.httpResponse,a="Unauthorized";n.setHeader("Content-Length",Buffer.byteLength(a)),n.writeHead(401,s),e.debug&&$n(n,e.deviceId,a),n.end(a)}async function Zn(e,t,s,n){var a;for(const t of s)t.sessionContext=e,Ne(t);if(0===e.state){if("Inform"!==(null===(a=t.cpeRequest)||void 0===a?void 0:a.name))return Hn(e);const s=await Gn(e,t);e.debug=!!Qs(e.cacheSnapshot,"cwmp.debug",{},e.timestamp,(t=>fn(e,t))),e.timeout||(e.timeout=+Qs(e.cacheSnapshot,"cwmp.sessionTimeout",{},e.timestamp,(t=>fn(e,t)))),e.httpRequest.socket.setTimeout(1e3*e.timeout),e.debug&&In(e.httpRequest,e.deviceId,n);if(!await qn(e,n))return e.authState?Xn(e,!0):(e.authState=1,Xn(e,!1));e.extendLock=e.timestamp+1e4;if(!await vs(`cwmp_session_${e.deviceId}`,1e3*e.timeout+15e3,0,e.sessionId)){Re({message:"CPE already in session",sessionContext:e});const t="CPE already in session";return e.httpResponse.setHeader("Content-Length",Buffer.byteLength(t)),e.httpResponse.writeHead(400,{Connection:"close"}),e.debug&&$n(e.httpResponse,e.deviceId,t),void e.httpResponse.end(t)}return e.state=1,e.authState=2,Oe({sessionContext:e,message:"Inform",rpc:t}),Un(e,s)}if(e.debug&&In(e.httpRequest,e.deviceId,n),2!==e.authState){if(!await qn(e,n))return e.authState?(await Jn(e),Xn(e,!0)):(e.authState=1,Xn(e,!1));e.authState=2}if(t.cpeRequest){if("TransferComplete"===t.cpeRequest.name)return 1!==e.state?Hn(e):(Oe({sessionContext:e,message:"CPE request",rpc:t}),async function(e,t){const{acsResponse:s,operation:n,fault:a}=await pn(e,t.cpeRequest);return n||Ne({sessionContext:e,message:"Unrecognized command key",rpc:t}),a&&(Object.assign(e.retries,n.retries),Vn(e,a,n.provisions,n.channels)),Un(e,gt({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}))}(e,t));if("GetRPCMethods"===t.cpeRequest.name){if(1!==e.state)return Hn(e);Oe({sessionContext:e,message:"CPE request",rpc:t});const s=gt({id:t.id,acsResponse:{name:"GetRPCMethodsResponse",methodList:["Inform","GetRPCMethods","TransferComplete"]},cwmpVersion:e.cwmpVersion});return Un(e,s)}if(1!==e.state||"Inform"===t.cpeRequest.name)return void Hn(e);throw new Error("ACS method not supported")}if(t.cpeResponse){if(2!==e.state)return Hn(e);const s=await async function(e,t,s){function n(e){return{code:"invalid_response",message:e}}if(t!==un(e))return n("Request ID not recognized");++e.rpcCount;const a=s,r=e.rpcRequest;if(r.next){if("getInstanceKeys"===r.next){const t=[],s={},n=r,i=a;for(const[e,a]of Object.entries(n.instanceValues)){const r=`${n.objectName}${i.instanceNumber}.${e}`;t.push(r),s[r]=a}if(t.length){const n={name:"GetParameterValues",parameterNames:t,next:"setInstanceKeys",instanceValues:s};e.rpcRequest=n}else e.rpcRequest=null}else if("setInstanceKeys"===r.next){const t=r,s=a,n=[];for(const e of s.parameterList)if(e[1]!==t.instanceValues[e[0].toString()]){const s=wt([t.instanceValues[e[0].toString()],e[2]]);n.push([e[0].toString(),s[0],s[1]])}if(n.length){const t={name:"SetParameterValues",parameterList:n,DATETIME_MILLISECONDS:!!Qs(e.cacheSnapshot,"cwmp.datetimeMilliseconds",{},e.timestamp,(t=>fn(e,t))),BOOLEAN_LITERAL:!!Qs(e.cacheSnapshot,"cwmp.booleanLiteral",{},e.timestamp,(t=>fn(e,t)))};e.rpcRequest=t}else e.rpcRequest=null}}else e.rpcRequest=null;const i=e.timestamp+e.iteration,o=(e.revisions[e.revisions.length-1]||0)+1;let l;if(e.deviceData.timestamps.revision=o,e.deviceData.attributes.revision=o,"GetParameterValuesResponse"===a.name){if("GetParameterValues"!==r.name)return n("Response name does not match request name");const t=new Set(r.parameterNames);for(const[s,n,r]of a.parameterList)t.delete(s.toString())?l=xt(e.deviceData,s,i,{object:[i,0],value:[i,[n,r]]},l):Ne({sessionContext:e,message:"Unexpected parameter in response",parameter:s.toString()});if(t.size)for(const s of t)Ne({sessionContext:e,message:"Missing parameter in response",parameter:s}),l=xt(e.deviceData,Ze.parse(s),i,{object:[i,0],value:[i,["","xsd:string"]]},l)}else if("GetParameterAttributesResponse"===a.name){if("GetParameterAttributes"!==r.name)throw new Error("Response name does not match request name");const t=new Set(r.parameterNames);for(const[s,n,r]of a.parameterList)t.delete(s.toString())?l=xt(e.deviceData,s,i,{notification:[i,n],accessList:[i,r]},l):Ne({sessionContext:e,message:"Unexpected parameter in response",parameter:s.toString()});if(t.size)for(const s of t)Ne({sessionContext:e,message:"Missing parameter in response",parameter:s}),l=xt(e.deviceData,Ze.parse(s),i,{notification:[i,0],accessList:[i,[]]},l)}else if("GetParameterNamesResponse"===a.name){if("GetParameterNames"!==r.name)return n("Response name does not match request name");let t;t=r.parameterPath.endsWith(".")?Ze.parse(r.parameterPath.slice(0,-1)):Ze.parse(r.parameterPath),a.parameterList.sort(((e,t)=>{const s=e[0],n=t[0],a=Math.min(s.length,n.length);for(let e=0;e<a;++e){if(s.segments[e]>n.segments[e])return 1;if(s.segments[e]<n.segments[e])return-1}return s.length-n.length}));for(let e=1;e<a.parameterList.length;++e){const t=a.parameterList[e-1][0],s=a.parameterList[e][0];let n=0;for(let r=s.length-2;r>=0;--r){if(r<t.length&&t.segments[r]===s.segments[r]){r===t.length-1&&(a.parameterList[e-1][1]=!0);break}a.parameterList.splice(e,0,[s.slice(0,r+1),!0,!0]),++n}e+=n}if(!t.length)for(const t of["DeviceID","Events","Tags","Reboot","FactoryReset","VirtualParameters","Downloads"]){const s=e.deviceData.paths.get(Ze.parse(t));s&&e.deviceData.attributes.has(s)&&e.deviceData.timestamps.set(s,i)}const s=Ze.parse("*"),o=[t.concat(s)];for(const[t,n,c]of a.parameterList)t.toString().startsWith(r.parameterPath)||`${t.toString()}.`===r.parameterPath&&!r.nextLevel?(n&&!r.nextLevel&&o.push(t.concat(s)),l=xt(e.deviceData,t,i,{object:[i,n?1:0],writable:[i,c?1:0]},l)):Ne({sessionContext:e,message:"Unexpected parameter in response",parameter:t.toString()});for(const t of o)l=xt(e.deviceData,t,i,null,l)}else if("SetParameterValuesResponse"===a.name){if("SetParameterValues"!==r.name)return n("Response name does not match request name");for(const t of r.parameterList)l=xt(e.deviceData,Ze.parse(t[0]),i+1,{object:[i+1,0],value:[i+1,t.slice(1)]},l)}else if("SetParameterAttributesResponse"===a.name){if("SetParameterAttributes"!==r.name)return n("Response name does not match request name");for(const t of r.parameterList){let s;null!=t[1]&&null!=t[2]?s={notification:[i+1,t[1]],accessList:[i+1,t[2]]}:null!=t[1]?s={notification:[i+1,t[1]]}:null!=t[2]&&(s={accessList:[i+1,t[2]]}),l=xt(e.deviceData,Ze.parse(t[0]),i+1,s,l)}}else if("AddObjectResponse"===a.name){if("AddObject"!==r.name)return n("Response name does not match request name");l=xt(e.deviceData,Ze.parse(r.objectName+a.instanceNumber),i+1,{object:[i+1,1]},l)}else if("DeleteObjectResponse"===a.name){if("DeleteObject"!==r.name)return n("Response name does not match request name");l=xt(e.deviceData,Ze.parse(r.objectName.slice(0,-1)),i+1,null,l)}else if("RebootResponse"===a.name){if("Reboot"!==r.name)return n("Response name does not match request name");l=xt(e.deviceData,Ze.parse("Reboot"),i+1,{value:[i+1,[e.timestamp,"xsd:dateTime"]]},l)}else if("FactoryResetResponse"===a.name){if("FactoryReset"!==r.name)return n("Response name does not match request name");l=xt(e.deviceData,Ze.parse("FactoryReset"),i+1,{value:[i+1,[e.timestamp,"xsd:dateTime"]]},l)}else{if("DownloadResponse"!==a.name)return n("Response name not recognized");if("Download"!==r.name)return n("Response name does not match request name");if(l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.Download`),i+1,{value:[i+1,[e.timestamp,"xsd:dateTime"]]},l),0===a.status)l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.LastDownload`),i+1,{value:[i+1,[e.timestamp,"xsd:dateTime"]]},l),l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.LastFileType`),i+1,{value:[i+1,[r.fileType,"xsd:string"]]},l),l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.LastFileName`),i+1,{value:[i+1,[r.fileType,"xsd:string"]]},l),l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.LastTargetFileName`),i+1,{value:[i+1,[r.fileType,"xsd:string"]]},l),l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.StartTime`),i+1,{value:[i+1,[+a.startTime,"xsd:dateTime"]]},l),l=xt(e.deviceData,Ze.parse(`Downloads.${r.instance}.CompleteTime`),i+1,{value:[i+1,[+a.completeTime,"xsd:dateTime"]]},l);else{const t={name:"Download",timestamp:e.timestamp,provisions:e.provisions,channels:e.channels,retries:{},args:{instance:r.instance,fileType:r.fileType,fileName:r.fileName,targetFileName:r.targetFileName}};for(const s of Object.keys(e.channels))null!=e.retries[s]&&(t.retries[s]=e.retries[s]);e.operations[r.commandKey]=t,e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[r.commandKey]=1}}if(l)for(const t of l)St(e.deviceData,t[0],t[1],t[2],t[3]);return null}(e,t.id,t.cpeResponse);return s&&(Vn(e,s),hn(e)),zn(e)}if(t.cpeFault){if(2!==e.state)return Hn(e);Ne({sessionContext:e,message:"CPE fault",rpc:t});const s=await async function(e,t,s){const n=e.rpcRequest;if(delete e.syncState,delete e.rpcRequest,++e.rpcCount,"9005"===s.detail.faultCode){const t=e.timestamp+e.iteration+1,s=(e.revisions[e.revisions.length-1]||0)+1;let a;if(e.deviceData.timestamps.revision=s,e.deviceData.attributes.revision=s,"GetParameterNames"===n.name?n.parameterPath&&(a=[[Ze.parse(n.parameterPath.replace(/\.$/,"")),t]]):"GetParameterValues"===n.name?a=n.parameterNames.map((e=>[Ze.parse(e.replace(/\.$/,"")),t])):"SetParameterValues"===n.name?a=n.parameterList.map((e=>[Ze.parse(e[0].replace(/\.$/,"")),t])):"AddObject"===n.name||"DeleteObject"===n.name?a=[[Ze.parse(n.objectName.replace(/\.$/,"")),t]]:"GetParameterAttributes"===n.name?a=n.parameterNames.map((e=>[Ze.parse(e.replace(/\.$/,"")),t])):"SetParameterAttributes"===n.name&&(a=n.parameterList.map((e=>[Ze.parse(e[0].replace(/\.$/,"")),t]))),a)for(const t of a)St(e.deviceData,t[0],t[1],t[2],t[3]);return null}return{code:`cwmp.${s.detail.faultCode}`,message:s.detail.faultString,detail:s.detail}}(e,t.id,t.cpeFault);return s&&(Vn(e,s),hn(e)),zn(e)}if(t.unknownMethod){if(1===e.state){Ne({sessionContext:e,message:"Method not supported",method:t.unknownMethod});const s={faultCode:"Server",faultString:"CWMP fault",detail:{faultCode:"8000",faultString:"Method not supported"}},n=gt({id:t.id,acsFault:s,cwmpVersion:e.cwmpVersion});return Un(e,n)}if(2===e.state){return Vn(e,{code:"invalid_response",message:"Response name does not match request name"}),hn(e),zn(e)}return Hn(e)}{if(1!==e.state)return Hn(e);e.state=2;const{faults:t,operations:s}=await async function(e){const t=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=t,e.deviceData.attributes.revision=t;const s=[],n=[];for(const[t,a]of Object.entries(e.operations)){if("Download"!==a.name)throw new Error(`Unknown operation name ${a.name}`);const r=1e3*+Qs(e.cacheSnapshot,"cwmp.downloadTimeout",{},e.timestamp,(t=>fn(e,t)));if(!(e.timestamp<a.timestamp+r))if(Ne({sessionContext:e,message:"Download operation timed out",commandKey:t}),+Qs(e.cacheSnapshot,"cwmp.downloadSuccessOnTimeout",{},e.timestamp,(t=>fn(e,t)))){const s={name:"TransferComplete",commandKey:t,startTime:0,completeTime:0};await pn(e,s)}else delete e.operations[t],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[t]=1,s.push({code:"timeout",message:"Download operation timed out",timestamp:a.timestamp}),n.push(a),dn(e,a.args.instance)}return{faults:s,operations:n}}(e);for(const[n,a]of t.entries()){for(const[t,a]of Object.entries(s[n].retries))e.retries[t]=a;Vn(e,a,s[n].provisions,s[n].channels)}return zn(e)}}async function Yn(e,t){Fn.concurrentRequests+=1;try{await async function(e,t){var s,n;if(Fn.totalRequests+=1,"POST"!==e.method)return t.writeHead(405,{Allow:"POST",Connection:"close"}),void t.end("405 Method Not Allowed");let a;const r=/\s*([a-zA-Z0-9\-_]+?)\s*=\s*"?([a-zA-Z0-9\-_]*?)"?\s*(,|;|$)/g;let i;for(;i=r.exec(e.headers.cookie);)"session"===i[1]&&(a=i[2]);if(!a&&Fn.concurrentRequests>Pn)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(Fn.droppedRequests+=1);let o=e;if(e.headers["content-encoding"])switch(e.headers["content-encoding"]){case"gzip":o=v.pipeline(o,T.createGunzip(),(()=>{}));break;case"deflate":o=v.pipeline(o,T.createInflate(),(()=>{}));break;default:return t.writeHead(415,{Connection:"close"}),void t.end("415 Unsupported Media Type")}const l=[];try{let e=!1;o.on("end",(()=>{e=!0}));for await(const e of o)l.push(e);if(!e)throw new Error("Connection closed")}catch(e){return}const c=Buffer.concat(l);let u,f=jn.get(e.socket);if(f&&(jn.delete(e.socket),f.httpRequest=e,f.httpResponse=t,f.sessionId!==a&&f.state||f.lastActivity+1e3*f.timeout<Date.now()))return Re({message:"Invalid session",sessionContext:f}),Qn(e,t,f,c.toString(),"Invalid session");if(e.headers["content-type"]){const t=e.headers["content-type"].match(/charset=['"]?([^'"\s]+)/i);t&&(u=t[1].toLowerCase())}if(!u){const e=function(e){const t=["utf16le","utf8","latin1","ascii"];for(const s of t){let t=e.toString(s,0,150);if(t.startsWith("<?xml")){t=t.slice(0,t.indexOf("?>"));try{return je(t.slice(5))}catch(e){}}}return null}(c),t=e?e.find((e=>"encoding"===e.localName)):null;u=t?t.value.toLowerCase():"utf8"}const p=function(e,t){try{return e.toString(t)}catch(s){if(b.encodingExists(t))return b.decode(e,t)}return null}(c,u);if(null==p){if(!f&&a){await new Promise((e=>setTimeout(e,100)));const s=await gs(`session_${a}`);s&&(f=await _n(s),f.httpRequest=e,f.httpResponse=t)}const s=`Unknown encoding '${u}'`;return Re({message:"XML parse error",parseError:s,sessionContext:f||{httpRequest:e,httpResponse:t}}),Qn(e,t,f,c.toString(),s)}const d=[];let m;try{m=mt(p,d)}catch(s){if(!f&&a){await new Promise((e=>setTimeout(e,100)));const s=await gs(`session_${a}`);s&&(f=await _n(s),f.httpRequest=e,f.httpResponse=t)}return Re({message:"XML parse error",parseError:s.message,sessionContext:f||{httpRequest:e,httpResponse:t}}),Qn(e,t,f,p,s.message)}if(!f&&a&&"Inform"!==(null===(s=m.cpeRequest)||void 0===s?void 0:s.name)){await new Promise((e=>setTimeout(e,100)));const s=await gs(`session_${a}`);s&&(f=await _n(s),f.httpRequest=e,f.httpResponse=t,e.socket.setTimeout(1e3*f.timeout),1!==f.authState&&(f.authState=0))}if(f)return Zn(f,m,d,p);if("Inform"!==(null===(n=m.cpeRequest)||void 0===n?void 0:n.name))return Re({message:"Invalid session",sessionContext:{httpRequest:e,httpResponse:t}}),Qn(e,t,null,p,"Invalid session");if(Fn.concurrentRequests>Pn)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(Fn.droppedRequests+=1);Fn.initiatedSessions+=1;const h=function(e){function t(e){return e.replace(/[^A-Za-z0-9_]/g,(e=>{const t=Buffer.from(e,"utf8");let s="";for(const e of t)s+="%"+e.toString(16).toUpperCase();return s}))}return e.ProductClass?t(e.OUI)+"-"+t(e.ProductClass)+"-"+t(e.SerialNumber):t(e.OUI)+"-"+t(e.SerialNumber)}(m.cpeRequest.deviceId),g=await Zs(),w=function(e,t,s){return{timestamp:Date.now(),deviceId:e,deviceData:cn(),cwmpVersion:t,timeout:s,provisions:[],channels:{},virtualParameters:[],revisions:[0],rpcCount:0,iteration:0,cycle:0,extensionsCache:{},declarations:[],state:0,authState:0}}(h,m.cwmpVersion,m.sessionTimeout);w.cacheSnapshot=g,w.httpRequest=e,w.httpResponse=t,w.sessionId=A.randomBytes(8).toString("hex");const{tasks:y,faults:S,operations:_,ttl:x}=await async function(e,t){const s=await ms(`${e}_tasks_faults_operations`);if(s){const e=JSON.parse(s);return{tasks:e.tasks||[],faults:e.faults||{},operations:e.operations||{},ttl:0}}const n=await Promise.all([ls(e,t),rs(e),cs(e)]);return{tasks:n[0][0],faults:n[1],operations:n[2],ttl:n[0][1]||0}}(h,w.timestamp);w.tasks=y,w.operations=_,w.cacheUntil=x,w.faults=S,w.retries={};for(const[e,t]of Object.entries(w.faults))t.expiry>=w.timestamp?(delete w.faults[e],w.faultsTouched||(w.faultsTouched={}),w.faultsTouched[e]=!0):w.retries[e]=t.retries;const O=await async function(e,t){const s=[[Ze.parse("Events"),t,{object:[t,1],writable:[t,0]}],[Ze.parse("DeviceID"),t,{object:[t,1],writable:[t,0]}]],n=await Yt.devices.findOne({_id:e});if(!n)return null;function a(e,t,n,r){e._timestamp&&(e._timestamp=+e._timestamp),e._attributesTimestamp&&(e._attributesTimestamp=+e._attributesTimestamp);const i={};let o=e._timestamp||1;r>o&&(o=r),null!=e._value&&(i.value=[e._timestamp||1,[e._value,e._type]],"xsd:dateTime"===e._type&&e._value instanceof Date&&(i.value[1][0]=+i.value[1][0]),e._object=!1),null!=e._writable&&(i.writable=[r||1,e._writable?1:0]),null!=e._object&&(i.object=[o,e._object?1:0]),null!=e._notification&&(i.notification=[e._attributesTimestamp||1,e._notification]),null!=e._accessList&&(i.accessList=[e._attributesTimestamp||1,e._accessList]);try{s.push([Ze.parse(t),o,i])}catch(e){const n=t.split(".");return n[n.length-1]=ke(n[n.length-1])+"__invalid",t=n.join("."),void s.push([Ze.parse(t),o,i])}for(const[s,r]of Object.entries(e))s.startsWith("_")||(e._object=!0,a(r,`${t}.${s}`,n+1,e._timestamp));e._object&&e._timestamp&&s.push([Ze.parse(t+".*"),e._timestamp])}const r=+n._timestamp||0;r&&s.push([Ze.parse("*"),r]);for(const[e,i]of Object.entries(n))switch(e){case"_lastInform":s.push([Ze.parse("Events.Inform"),+i,{object:[+i,0],writable:[+i,0],value:[+i,[+i,"xsd:dateTime"]]}]);break;case"_lastBoot":s.push([Ze.parse("Events.1_BOOT"),+i,{object:[+i,0],writable:[+i,0],value:[+i,[+i,"xsd:dateTime"]]}]);break;case"_lastBootstrap":s.push([Ze.parse("Events.0_BOOTSTRAP"),+i,{object:[+i,0],writable:[+i,0],value:[+i,[+i,"xsd:dateTime"]]}]);break;case"_registered":s.push([Ze.parse("Events.Registered"),t,{object:[t,0],writable:[t,0],value:[t,[+i,"xsd:dateTime"]]}]);break;case"_id":s.push([Ze.parse("DeviceID.ID"),t,{object:[t,0],writable:[t,0],value:[t,[i,"xsd:string"]]}]);break;case"_tags":i.length&&s.push([Ze.parse("Tags"),t,{object:[t,1],writable:[t,0]}]);for(const e of i)s.push([Ze.parse("Tags."+ke(e)),t,{object:[t,0],writable:[t,1],value:[t,[!0,"xsd:boolean"]]}]);break;case"_deviceId":null!=i._Manufacturer&&s.push([Ze.parse("DeviceID.Manufacturer"),t,{object:[t,0],writable:[t,0],value:[t,[i._Manufacturer,"xsd:string"]]}]),null!=i._OUI&&s.push([Ze.parse("DeviceID.OUI"),t,{object:[t,0],writable:[t,0],value:[t,[i._OUI,"xsd:string"]]}]),null!=i._ProductClass&&s.push([Ze.parse("DeviceID.ProductClass"),t,{object:[t,0],writable:[t,0],value:[t,[i._ProductClass,"xsd:string"]]}]),null!=i._SerialNumber&&s.push([Ze.parse("DeviceID.SerialNumber"),t,{object:[t,0],writable:[t,0],value:[t,[i._SerialNumber,"xsd:string"]]}]);break;default:e.startsWith("_")||a(i,e,1,r)}return s}(w.deviceId,w.timestamp);if(O)for(const e of O){const t=w.deviceData.paths.add(e[0]);w.deviceData.timestamps.set(t,e[1],0),e[2]&&w.deviceData.attributes.set(t,e[2],0)}else w.new=!0;return Zn(w,m,d,p)}(e,t)}catch(t){throw jn.delete(e.socket),t}finally{Fn.concurrentRequests-=1}}async function Qn(e,t,s,n,a){let r=!1,i=null;if(s)r=s.debug,i=s.deviceId;else{r=!!Qs(await Zs(),"cwmp.debug",{remoteAddress:ne(e).remoteAddress},Date.now(),(t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?ne(e).remoteAddress:t))}t.setHeader("Content-Length",Buffer.byteLength(a)),t.writeHead(400,{Connection:"close"}),r&&(In(e,i,n),$n(t,i,a)),t.end(a),(null==s?void 0:s.state)&&await Jn(s)}setInterval((()=>{Fn.droppedRequests&&Se({message:"Worker overloaded",droppedRequests:Fn.droppedRequests,totalRequests:Fn.totalRequests,initiatedSessions:Fn.initiatedSessions,pid:process.pid}),Fn.totalRequests=0,Fn.droppedRequests=0,Fn.initiatedSessions=0}),1e4).unref(),function(e,t){ie.hostname=O.hostname(),ie.pid=process.pid,ie.name=`genieacs-${e}`,ie.version=t,oe=J(`${e.toUpperCase()}_LOG_FILE`),le=J(`${e.toUpperCase()}_ACCESS_LOG_FILE`),oe&&(fe=x.createWriteStream(null,{fd:x.openSync(oe,"a")}),pe=x.fstatSync(fe.fd)),le&&(de=x.createWriteStream(null,{fd:x.openSync(le,"a")}),me=x.fstatSync(de.fd));const s=process.env.JOURNAL_STREAM;if(s){const[e,t]=s.split(":").map(parseInt);ce=pe.dev===e&&pe.ino===t,ue=me.dev===e&&me.ino===t}(oe||le)&&setTimeout(he,6e4-Date.now()%6e4).unref()}("cwmp",ze);const ea=J("CWMP_INTERFACE"),ta=J("CWMP_PORT");function sa(){setTimeout(na,5e3).unref(),Promise.all([ns(),Ct(),Ie.disconnect()]).catch(na)}function na(){Ct().finally((()=>{process.exit(1)}))}if(Ie){const e=J("CWMP_SSL_KEY"),s=J("CWMP_SSL_CERT"),n={port:ta,host:ea,ssl:e&&s?{key:e,cert:s}:null,onConnection:async function(e){await function(e,t,s){return new Promise(((n,a)=>{const r=setTimeout((()=>{a(new Error(`Event ${t} timed out after ${s} ms`))}),s);e.once(t,((...e)=>{clearTimeout(r),n(e)}))}))}(e,"close",3e5);const t=jn.get(e);if(!t)return;if(jn.delete(e),2!==t.authState)return void Re({message:"Authentication failure",sessionContext:t});const s=Date.now(),n=t.lastActivity,a={sessionContext:t,message:"Session timeout",sessionTimestamp:t.timestamp},r=t.lastActivity+1e3*t.timeout-s;if(r<=0)return Re(a),void await Jn(t);await hs(`session_${t.sessionId}`,await async function(e){const t=[];for(const s of e.deviceData.paths.find(Ze.parse(""),!1,!1,99)){const n=[s.toString(),e.deviceData.trackers.get(s)||null,e.deviceData.timestamps.getRevisions(s)||null,e.deviceData.attributes.getRevisions(s)||null];t.push(n)}const s=e.declarations.map((e=>e.map((e=>Object.assign({},e,{path:e.path.toString()}))))),n=Object.assign({},e,{deviceData:t,declarations:s,syncState:null,toLoad:null,httpRequest:null,httpResponse:null});return JSON.stringify(n)}(t),Math.ceil(r/1e3)+3),await function(e,t=!0){return new Promise((s=>{const n=setTimeout(s,e);t||n.unref()}))}(r+1e3,!1);const i=await ms(`session_${t.sessionId}`);if(!i)return;(await _n(i)).lastActivity===n&&(Re(a),await Jn(t))},onClientError:async function(e,s){const n=Q(s).remoteAddress;Qs(await Zs(),"cwmp.debug",{remoteAddress:n},Date.now(),(e=>Array.isArray(e)&&"FUNC"===e[0]&&"REMOTE_ADDRESS"===e[1]?n:e))&&function(e,s){if(!Tn)return;const n={event:"client error",timestamp:new Date,remoteAddress:e,error:s.message};if("yaml"===An)t.appendFileSync(Tn,"---\n"+Dn(n));else{if("json"!==An)throw new Error("Unrecognized DEBUG_FORMAT option");t.appendFileSync(Tn,JSON.stringify(n)+"\n")}}(n,e)},timeout:3e4,keepAliveTimeout:0};process.on("unhandledRejection",(e=>{throw e})),process.on("uncaughtException",(e=>{"ERR_IPC_DISCONNECTED"!==e.code&&(_e({message:"Uncaught exception",exception:e,pid:process.pid}),Y(!1).then(sa).catch(na))}));const a=async function(){Qt=m.MongoClient.connect(""+J("MONGODB_CONNECTION_URL"));const e=(await Qt).db();await Promise.all(ts.map((t=>t(e))))}().then((()=>{!function(e,t){if(H=(e,s)=>{X&&s.setHeader("Connection","close"),t(e,s).catch((e=>{try{s.socket.unref(),s.headersSent&&(s.writeHead(500,{Connection:"close"}),s.end(`${e.name}: ${e.message}`))}catch(e){}throw e}))},e.ssl){const t={key:e.ssl.key.split(":").map((e=>x.readFileSync(_.resolve(U,e.trim())))),cert:e.ssl.cert.split(":").map((e=>x.readFileSync(_.resolve(U,e.trim()))))};K=R.createServer(t,H),e.onConnection&&K.on("secureConnection",e.onConnection)}else K=N.createServer(H),e.onConnection&&K.on("connection",e.onConnection);K.on("connection",(e=>{Z.set(e,{localAddress:e.localAddress,localPort:e.localPort,remoteAddress:e.remoteAddress,remotePort:e.remotePort,remoteFamily:e.remoteFamily})})),e.onClientError&&K.on("clientError",((t,s)=>{"ECONNRESET"!==t.code&&s.writable&&s.end("HTTP/1.1 400 Bad Request\r\nConnection: close\r\n\r\n"),e.onClientError(t,s)})),K.timeout=e.timeout||0,null!=e.keepAliveTimeout&&(K.keepAliveTimeout=e.keepAliveTimeout),K.listen({port:e.port,host:e.host})}(n,Yn)})).catch((e=>{setTimeout((()=>{throw e}))}));process.on("SIGINT",(()=>{a.finally((()=>{Y(!1).then(sa).catch(na)}))})),process.on("SIGTERM",(()=>{a.finally((()=>{Y(!1).then(sa).catch(na)}))}))}else{const e=J("CWMP_WORKER_PROCESSES");ye({message:"genieacs-cwmp starting",pid:process.pid,version:ze}),function(e,t,n){D.default.on("listening",((e,s)=>{4!==s.addressType&&6!==s.addressType||s.address!==n||s.port!==t||ye({message:"Worker listening",pid:e.process.pid,address:s.address,port:s.port})})),D.default.on("exit",Ce),e||(e=Math.max(2,s.cpus().length));for(let t=0;t<e;++t)Ae()}(e,ta,ea),process.on("SIGINT",(()=>{ye({message:"Received signal SIGINT, exiting",pid:process.pid}),Ee()})),process.on("SIGTERM",(()=>{ye({message:"Received signal SIGTERM, exiting",pid:process.pid}),Ee()}))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
