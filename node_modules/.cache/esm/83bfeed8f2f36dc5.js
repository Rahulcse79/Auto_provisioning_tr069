let path,fs,rollup,rollupJson,typescript,terser,nodeResolve,commonjs,postcss,postcssImport,postcssPresetEnv,postcssColorMod,cssnano,optimize,xmlParser;_f2f‍.w("path",[["*",null,function(v){path=v}]]);_f2f‍.w("fs",[["*",null,function(v){fs=v}]]);_f2f‍.w("rollup",[["rollup",["rollup"],function(v){rollup=v}]]);_f2f‍.w("@rollup/plugin-json",[["default",["rollupJson"],function(v){rollupJson=v}]]);_f2f‍.w("@rollup/plugin-typescript",[["default",["typescript"],function(v){typescript=v}]]);_f2f‍.w("rollup-plugin-terser",[["terser",["terser"],function(v){terser=v}]]);_f2f‍.w("@rollup/plugin-node-resolve",[["default",["nodeResolve"],function(v){nodeResolve=v}]]);_f2f‍.w("@rollup/plugin-commonjs",[["default",["commonjs"],function(v){commonjs=v}]]);_f2f‍.w("postcss",[["default",["postcss"],function(v){postcss=v}]]);_f2f‍.w("postcss-import",[["default",["postcssImport"],function(v){postcssImport=v}]]);_f2f‍.w("postcss-preset-env",[["default",["postcssPresetEnv"],function(v){postcssPresetEnv=v}]]);_f2f‍.w("postcss-color-mod-function",[["default",["postcssColorMod"],function(v){postcssColorMod=v}]]);_f2f‍.w("cssnano",[["default",["cssnano"],function(v){cssnano=v}]]);_f2f‍.w("svgo",[["optimize",["optimize"],function(v){optimize=v}]]);_f2f‍.w("../lib/xml-parser",[["*",null,function(v){xmlParser=v}]]);/**
 * Copyright 2013-2019  GenieACS Inc.
 *
 * This file is part of GenieACS.
 *
 * GenieACS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * GenieACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with GenieACS.  If not, see <http://www.gnu.org/licenses/>.
 */















const MODE = process.env["NODE_ENV"] || "production";
const BUILD_METADATA = new Date()
    .toISOString()
    .split(".")[0]
    .replace(/[^0-9]/g, "");
const INPUT_DIR = path.resolve(__dirname, "..");
const OUTPUT_DIR = path.resolve(__dirname, "../dist");
const builtins = [
    "path",
    "fs",
    "cluster",
    "os",
    "tls",
    "http",
    "https",
    "zlib",
    "crypto",
    "util",
    "vm",
    "querystring",
    "child_process",
    "dgram",
    "url",
    "readline",
    "stream",
    "bson", // not a built-in but not a direct dependency either
];
function rmDirSync(dirPath) {
    if (!fs.existsSync(dirPath))
        return;
    const files = fs.readdirSync(dirPath);
    for (const file of files) {
        const filePath = `${dirPath}/${file}`;
        if (fs.statSync(filePath).isFile())
            fs.unlinkSync(filePath);
        else
            rmDirSync(filePath);
    }
    fs.rmdirSync(dirPath);
}
// For lockfileVersion = 1
function stripDevDeps(deps) {
    if (!deps["dependencies"])
        return;
    for (const [k, v] of Object.entries(deps["dependencies"])) {
        if (v["dev"])
            delete deps["dependencies"][k];
        else
            stripDevDeps(v);
    }
    if (!Object.keys(deps["dependencies"]).length)
        delete deps["dependencies"];
}
// For lockfileVersion = 2
function stripDevDeps2(deps) {
    if (!deps["packages"])
        return;
    for (const [k, v] of Object.entries(deps["packages"])) {
        delete v["devDependencies"];
        if (v["dev"])
            delete deps["packages"][k];
    }
}
function xmlTostring(xml) {
    const children = [];
    for (const c of xml.children || [])
        children.push(xmlTostring(c));
    return xml.name === "root" && xml.bodyIndex === 0
        ? children.join("")
        : `<${xml.name} ${xml.attrs}>${children.join("")}</${xml.name}>`;
}
function generateSymbol(id, svgStr) {
    const xml = xmlParser.parseXml(svgStr);
    const svg = xml.children[0];
    const svgAttrs = xmlParser.parseAttrs(svg.attrs);
    let viewBox = "";
    for (const a of svgAttrs) {
        if (a.name === "viewBox") {
            viewBox = `viewBox="${a.value}"`;
            break;
        }
    }
    const symbolBody = xml.children[0].children
        .map((c) => xmlTostring(c))
        .join("");
    return `<symbol id="icon-${id}" ${viewBox}>${symbolBody}</symbol>`;
}
async function init() {
    // Delete any old output directory
    rmDirSync(OUTPUT_DIR);
    // Create output directory layout
    fs.mkdirSync(OUTPUT_DIR);
    fs.mkdirSync(OUTPUT_DIR + "/bin");
    fs.mkdirSync(OUTPUT_DIR + "/public");
    // Create package.json
    const packageJson = JSON.parse(fs.readFileSync(path.resolve(INPUT_DIR, "package.json")).toString());
    delete packageJson["devDependencies"];
    delete packageJson["private"];
    packageJson["scripts"] = {
        install: packageJson["scripts"].install,
        configure: packageJson["scripts"].configure,
    };
    packageJson["version"] = `${packageJson["version"]}+${BUILD_METADATA}`;
    fs.writeFileSync(path.resolve(OUTPUT_DIR, "package.json"), JSON.stringify(packageJson, null, 2));
    // Create npm-shrinkwrap.json
    const npmShrinkwrapJson = JSON.parse(fs.readFileSync(path.resolve(INPUT_DIR, "npm-shrinkwrap.json")).toString());
    npmShrinkwrapJson["version"] = packageJson["version"];
    stripDevDeps(npmShrinkwrapJson);
    stripDevDeps2(npmShrinkwrapJson);
    fs.writeFileSync(path.resolve(OUTPUT_DIR, "npm-shrinkwrap.json"), JSON.stringify(npmShrinkwrapJson, null, 2));
    return Object.keys(packageJson["dependencies"]);
}
async function copyStatic() {
    const files = [
        "LICENSE",
        "README.md",
        "CHANGELOG.md",
        "public/logo.png",
        "public/favicon.png",
        "public/log-out.svg",
        "public/logoLight.png",
        "public/admin-users-svgrepo-com.svg",
        "public/devices-svgrepo-com.svg",
        "public/overview-svgrepo-com.svg",
        "public/shield-error-svgrepo-com.svg",
    ];
    for (const file of files) {
        fs.copyFileSync(path.resolve(INPUT_DIR, file), path.resolve(OUTPUT_DIR, file));
    }
}
async function generateCss() {
    const cssInPath = path.resolve(INPUT_DIR, "ui/css/app.css");
    const cssOutPath = path.resolve(OUTPUT_DIR, "public/app.css");
    const cssIn = fs.readFileSync(cssInPath);
    const cssOut = await postcss([
        postcssImport,
        postcssPresetEnv({
            stage: 3,
            features: {
                "nesting-rules": true,
            },
        }),
        postcssColorMod,
        ...(MODE === "production" ? [cssnano] : []),
    ]).process(cssIn, { from: cssInPath, to: cssOutPath });
    fs.writeFileSync(cssOutPath, cssOut.css);
}
async function generateBackendJs(externals) {
    for (const bin of [
        "genieacs-cwmp",
        "genieacs-ext",
        "genieacs-nbi",
        "genieacs-fs",
        "genieacs-ui",
    ]) {
        const inputFile = path.resolve(INPUT_DIR, `bin/${bin}.ts`);
        const outputFile = path.resolve(OUTPUT_DIR, `bin/${bin}`);
        const bundle = await rollup({
            input: inputFile,
            external: [...builtins, ...externals],
            acorn: {
                allowHashBang: true,
            },
            treeshake: {
                propertyReadSideEffects: false,
                moduleSideEffects: false,
            },
            plugins: [
                rollupJson({ preferConst: true }),
                {
                    name: "",
                    resolveId: (importee, importer) => {
                        if (importee.endsWith("/package.json")) {
                            const p = path.resolve(path.dirname(importer), importee);
                            if (p === path.resolve(INPUT_DIR, "package.json"))
                                return path.resolve(OUTPUT_DIR, "package.json");
                        }
                        return null;
                    },
                },
                typescript({
                    tsconfig: "./tsconfig.json",
                    include: [`bin/${bin}.ts`, "lib/**/*.ts"],
                }),
                MODE === "production" ? terser() : null,
            ],
        });
        await bundle.write({
            format: "cjs",
            preferConst: true,
            sourcemap: "inline",
            sourcemapExcludeSources: true,
            banner: "#!/usr/bin/env node",
            file: outputFile,
        });
        // Mark as executable
        const mode = fs.statSync(outputFile).mode;
        fs.chmodSync(outputFile, mode | 73);
    }
}
async function generateFrontendJs(externals) {
    const inputFile = path.resolve(INPUT_DIR, "ui/app.ts");
    const outputDir = path.resolve(OUTPUT_DIR, "public");
    const inlineDeps = ["parsimmon", "espresso-iisojs"];
    const bundle = await rollup({
        input: inputFile,
        external: [
            ...builtins,
            ...externals.filter((e) => !inlineDeps.includes(e)),
        ],
        plugins: [
            rollupJson({ preferConst: true }),
            {
                name: "",
                resolveId: function (importee, importer) {
                    if (importee.endsWith("/package.json")) {
                        const p = path.resolve(path.dirname(importer), importee);
                        if (p === path.resolve(INPUT_DIR, "package.json"))
                            return path.resolve(OUTPUT_DIR, "package.json");
                    }
                    return null;
                },
            },
            typescript({ tsconfig: "./tsconfig.json" }),
            nodeResolve(),
            commonjs(),
            MODE === "production" ? terser() : null,
        ],
        preserveEntrySignatures: false,
        treeshake: {
            propertyReadSideEffects: false,
            moduleSideEffects: false,
        },
        onwarn: ((warning, warn) => {
            // Ignore circular dependency warnings
            if (warning.code !== "CIRCULAR_DEPENDENCY")
                warn(warning);
        }),
    });
    await bundle.write({
        manualChunks: (id) => {
            if (id.includes("node_modules/codemirror"))
                return "codemirror";
            else if (id.includes("node_modules/yaml"))
                return "yaml";
            return "app";
        },
        preferConst: true,
        format: "es",
        sourcemap: true,
        sourcemapExcludeSources: true,
        dir: outputDir,
    });
}
async function generateIconsSprite() {
    const symbols = [];
    const iconsDir = path.resolve(INPUT_DIR, "ui/icons");
    for (const file of fs.readdirSync(iconsDir)) {
        const id = path.parse(file).name;
        const filePath = path.join(iconsDir, file);
        const { data } = await optimize(fs.readFileSync(filePath).toString(), {
            plugins: [
                {
                    name: "preset-default",
                    params: {
                        overrides: {
                            removeViewBox: false,
                        },
                    },
                },
            ],
        });
        symbols.push(generateSymbol(id, data));
    }
    fs.writeFileSync(path.resolve(OUTPUT_DIR, "public/icons.svg"), `<svg xmlns="http://www.w3.org/2000/svg">${symbols.join("")}</svg>`);
}
init()
    .then((externals) => {
    Promise.all([
        copyStatic(),
        generateCss(),
        generateIconsSprite(),
        generateBackendJs(externals),
        generateFrontendJs(externals),
    ])
        .then(() => {
        // Ignore
    })
        .catch((err) => {
        process.stderr.write(err.stack + "\n");
    });
})
    .catch((err) => {
    process.stderr.write(err.stack + "\n");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvY29yYWwvRG9jdW1lbnRzL0dpdEh1Yi9BdXRvX3Byb3Zpc2lvbmluZ190cjA2OS9idWlsZC9idWlsZC50cyIsInNvdXJjZXMiOlsiL2hvbWUvY29yYWwvRG9jdW1lbnRzL0dpdEh1Yi9BdXRvX3Byb3Zpc2lvbmluZ190cjA2OS9idWlsZC9idWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEVBQUUsTUFBTSxFQUFrQixNQUFNLFFBQVEsQ0FBQztBQUNoRCxPQUFPLFVBQVUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QyxPQUFPLFVBQVUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUMsT0FBTyxXQUFXLE1BQU0sNkJBQTZCLENBQUM7QUFDdEQsT0FBTyxRQUFRLE1BQU0seUJBQXlCLENBQUM7QUFDL0MsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sYUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sZ0JBQWdCLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxlQUFlLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxLQUFLLFNBQVMsTUFBTSxtQkFBbUIsQ0FBQztBQUUvQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFlBQVksQ0FBQztBQUVyRCxNQUFNLGNBQWMsR0FBRyxJQUFJLElBQUksRUFBRTtLQUM5QixXQUFXLEVBQUU7S0FDYixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMs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LENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE5ICBHZW5pZUFDUyBJbmMuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgR2VuaWVBQ1MuXG4gKlxuICogR2VuaWVBQ1MgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBHZW5pZUFDUyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBHZW5pZUFDUy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHJvbGx1cCwgV2FybmluZ0hhbmRsZXIgfSBmcm9tIFwicm9sbHVwXCI7XG5pbXBvcnQgcm9sbHVwSnNvbiBmcm9tIFwiQHJvbGx1cC9wbHVnaW4tanNvblwiO1xuaW1wb3J0IHR5cGVzY3JpcHQgZnJvbSBcIkByb2xsdXAvcGx1Z2luLXR5cGVzY3JpcHRcIjtcbmltcG9ydCB7IHRlcnNlciB9IGZyb20gXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiO1xuaW1wb3J0IG5vZGVSZXNvbHZlIGZyb20gXCJAcm9sbHVwL3BsdWdpbi1ub2RlLXJlc29sdmVcIjtcbmltcG9ydCBjb21tb25qcyBmcm9tIFwiQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIjtcbmltcG9ydCBwb3N0Y3NzIGZyb20gXCJwb3N0Y3NzXCI7XG5pbXBvcnQgcG9zdGNzc0ltcG9ydCBmcm9tIFwicG9zdGNzcy1pbXBvcnRcIjtcbmltcG9ydCBwb3N0Y3NzUHJlc2V0RW52IGZyb20gXCJwb3N0Y3NzLXByZXNldC1lbnZcIjtcbmltcG9ydCBwb3N0Y3NzQ29sb3JNb2QgZnJvbSBcInBvc3Rjc3MtY29sb3ItbW9kLWZ1bmN0aW9uXCI7XG5pbXBvcnQgY3NzbmFubyBmcm9tIFwiY3NzbmFub1wiO1xuaW1wb3J0IHsgb3B0aW1pemUgfSBmcm9tIFwic3Znb1wiO1xuaW1wb3J0ICogYXMgeG1sUGFyc2VyIGZyb20gXCIuLi9saWIveG1sLXBhcnNlclwiO1xuXG5jb25zdCBNT0RFID0gcHJvY2Vzcy5lbnZbXCJOT0RFX0VOVlwiXSB8fCBcInByb2R1Y3Rpb25cIjtcblxuY29uc3QgQlVJTERfTUVUQURBVEEgPSBuZXcgRGF0ZSgpXG4gIC50b0lTT1N0cmluZygpXG4gIC5zcGxpdChcIi5cIilbMF1cbiAgLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKTtcblxuY29uc3QgSU5QVVRfRElSID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuLlwiKTtcbmNvbnN0IE9VVFBVVF9ESVIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uL2Rpc3RcIik7XG5cbmNvbnN0IGJ1aWx0aW5zID0gW1xuICBcInBhdGhcIixcbiAgXCJmc1wiLFxuICBcImNsdXN0ZXJcIixcbiAgXCJvc1wiLFxuICBcInRsc1wiLFxuICBcImh0dHBcIixcbiAgXCJodHRwc1wiLFxuICBcInpsaWJcIixcbiAgXCJjcnlwdG9cIixcbiAgXCJ1dGlsXCIsXG4gIFwidm1cIixcbiAgXCJxdWVyeXN0cmluZ1wiLFxuICBcImNoaWxkX3Byb2Nlc3NcIixcbiAgXCJkZ3JhbVwiLFxuICBcInVybFwiLFxuICBcInJlYWRsaW5lXCIsXG4gIFwic3RyZWFtXCIsXG4gIFwiYnNvblwiLCAvLyBub3QgYSBidWlsdC1pbiBidXQgbm90IGEgZGlyZWN0IGRlcGVuZGVuY3kgZWl0aGVyXG5dO1xuXG5mdW5jdGlvbiBybURpclN5bmMoZGlyUGF0aCk6IHZvaWQge1xuICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyUGF0aCkpIHJldHVybjtcbiAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXJQYXRoKTtcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGAke2RpclBhdGh9LyR7ZmlsZX1gO1xuICAgIGlmIChmcy5zdGF0U3luYyhmaWxlUGF0aCkuaXNGaWxlKCkpIGZzLnVubGlua1N5bmMoZmlsZVBhdGgpO1xuICAgIGVsc2Ugcm1EaXJTeW5jKGZpbGVQYXRoKTtcbiAgfVxuICBmcy5ybWRpclN5bmMoZGlyUGF0aCk7XG59XG5cbi8vIEZvciBsb2NrZmlsZVZlcnNpb24gPSAxXG5mdW5jdGlvbiBzdHJpcERldkRlcHMoZGVwcyk6IHZvaWQge1xuICBpZiAoIWRlcHNbXCJkZXBlbmRlbmNpZXNcIl0pIHJldHVybjtcbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoZGVwc1tcImRlcGVuZGVuY2llc1wiXSkpIHtcbiAgICBpZiAodltcImRldlwiXSkgZGVsZXRlIGRlcHNbXCJkZXBlbmRlbmNpZXNcIl1ba107XG4gICAgZWxzZSBzdHJpcERldkRlcHModik7XG4gIH1cbiAgaWYgKCFPYmplY3Qua2V5cyhkZXBzW1wiZGVwZW5kZW5jaWVzXCJdKS5sZW5ndGgpIGRlbGV0ZSBkZXBzW1wiZGVwZW5kZW5jaWVzXCJdO1xufVxuXG4vLyBGb3IgbG9ja2ZpbGVWZXJzaW9uID0gMlxuZnVuY3Rpb24gc3RyaXBEZXZEZXBzMihkZXBzKTogdm9pZCB7XG4gIGlmICghZGVwc1tcInBhY2thZ2VzXCJdKSByZXR1cm47XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRlcHNbXCJwYWNrYWdlc1wiXSkpIHtcbiAgICBkZWxldGUgdltcImRldkRlcGVuZGVuY2llc1wiXTtcbiAgICBpZiAodltcImRldlwiXSkgZGVsZXRlIGRlcHNbXCJwYWNrYWdlc1wiXVtrXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB4bWxUb3N0cmluZyh4bWwpOiBzdHJpbmcge1xuICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICBmb3IgKGNvbnN0IGMgb2YgeG1sLmNoaWxkcmVuIHx8IFtdKSBjaGlsZHJlbi5wdXNoKHhtbFRvc3RyaW5nKGMpKTtcblxuICByZXR1cm4geG1sLm5hbWUgPT09IFwicm9vdFwiICYmIHhtbC5ib2R5SW5kZXggPT09IDBcbiAgICA/IGNoaWxkcmVuLmpvaW4oXCJcIilcbiAgICA6IGA8JHt4bWwubmFtZX0gJHt4bWwuYXR0cnN9PiR7Y2hpbGRyZW4uam9pbihcIlwiKX08LyR7eG1sLm5hbWV9PmA7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3ltYm9sKGlkOiBzdHJpbmcsIHN2Z1N0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgeG1sID0geG1sUGFyc2VyLnBhcnNlWG1sKHN2Z1N0cik7XG4gIGNvbnN0IHN2ZyA9IHhtbC5jaGlsZHJlblswXTtcbiAgY29uc3Qgc3ZnQXR0cnMgPSB4bWxQYXJzZXIucGFyc2VBdHRycyhzdmcuYXR0cnMpO1xuICBsZXQgdmlld0JveCA9IFwiXCI7XG4gIGZvciAoY29uc3QgYSBvZiBzdmdBdHRycykge1xuICAgIGlmIChhLm5hbWUgPT09IFwidmlld0JveFwiKSB7XG4gICAgICB2aWV3Qm94ID0gYHZpZXdCb3g9XCIke2EudmFsdWV9XCJgO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IHN5bWJvbEJvZHkgPSB4bWwuY2hpbGRyZW5bMF0uY2hpbGRyZW5cbiAgICAubWFwKChjKSA9PiB4bWxUb3N0cmluZyhjKSlcbiAgICAuam9pbihcIlwiKTtcbiAgcmV0dXJuIGA8c3ltYm9sIGlkPVwiaWNvbi0ke2lkfVwiICR7dmlld0JveH0+JHtzeW1ib2xCb2R5fTwvc3ltYm9sPmA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAvLyBEZWxldGUgYW55IG9sZCBvdXRwdXQgZGlyZWN0b3J5XG4gIHJtRGlyU3luYyhPVVRQVVRfRElSKTtcblxuICAvLyBDcmVhdGUgb3V0cHV0IGRpcmVjdG9yeSBsYXlvdXRcbiAgZnMubWtkaXJTeW5jKE9VVFBVVF9ESVIpO1xuICBmcy5ta2RpclN5bmMoT1VUUFVUX0RJUiArIFwiL2JpblwiKTtcbiAgZnMubWtkaXJTeW5jKE9VVFBVVF9ESVIgKyBcIi9wdWJsaWNcIik7XG5cbiAgLy8gQ3JlYXRlIHBhY2thZ2UuanNvblxuICBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2UoXG4gICAgZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShJTlBVVF9ESVIsIFwicGFja2FnZS5qc29uXCIpKS50b1N0cmluZygpXG4gICk7XG4gIGRlbGV0ZSBwYWNrYWdlSnNvbltcImRldkRlcGVuZGVuY2llc1wiXTtcbiAgZGVsZXRlIHBhY2thZ2VKc29uW1wicHJpdmF0ZVwiXTtcbiAgcGFja2FnZUpzb25bXCJzY3JpcHRzXCJdID0ge1xuICAgIGluc3RhbGw6IHBhY2thZ2VKc29uW1wic2NyaXB0c1wiXS5pbnN0YWxsLFxuICAgIGNvbmZpZ3VyZTogcGFja2FnZUpzb25bXCJzY3JpcHRzXCJdLmNvbmZpZ3VyZSxcbiAgfTtcbiAgcGFja2FnZUpzb25bXCJ2ZXJzaW9uXCJdID0gYCR7cGFja2FnZUpzb25bXCJ2ZXJzaW9uXCJdfSske0JVSUxEX01FVEFEQVRBfWA7XG4gIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgcGF0aC5yZXNvbHZlKE9VVFBVVF9ESVIsIFwicGFja2FnZS5qc29uXCIpLFxuICAgIEpTT04uc3RyaW5naWZ5KHBhY2thZ2VKc29uLCBudWxsLCAyKVxuICApO1xuXG4gIC8vIENyZWF0ZSBucG0tc2hyaW5rd3JhcC5qc29uXG4gIGNvbnN0IG5wbVNocmlua3dyYXBKc29uID0gSlNPTi5wYXJzZShcbiAgICBmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKElOUFVUX0RJUiwgXCJucG0tc2hyaW5rd3JhcC5qc29uXCIpKS50b1N0cmluZygpXG4gICk7XG4gIG5wbVNocmlua3dyYXBKc29uW1widmVyc2lvblwiXSA9IHBhY2thZ2VKc29uW1widmVyc2lvblwiXTtcbiAgc3RyaXBEZXZEZXBzKG5wbVNocmlua3dyYXBKc29uKTtcbiAgc3RyaXBEZXZEZXBzMihucG1TaHJpbmt3cmFwSnNvbik7XG4gIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgcGF0aC5yZXNvbHZlKE9VVFBVVF9ESVIsIFwibnBtLXNocmlua3dyYXAuanNvblwiKSxcbiAgICBKU09OLnN0cmluZ2lmeShucG1TaHJpbmt3cmFwSnNvbiwgbnVsbCwgMilcbiAgKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhY2thZ2VKc29uW1wiZGVwZW5kZW5jaWVzXCJdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29weVN0YXRpYygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgZmlsZXMgPSBbXG4gICAgXCJMSUNFTlNFXCIsXG4gICAgXCJSRUFETUUubWRcIixcbiAgICBcIkNIQU5HRUxPRy5tZFwiLFxuICAgIFwicHVibGljL2xvZ28ucG5nXCIsXG4gICAgXCJwdWJsaWMvZmF2aWNvbi5wbmdcIixcbiAgICBcInB1YmxpYy9sb2ctb3V0LnN2Z1wiLFxuICAgIFwicHVibGljL2xvZ29MaWdodC5wbmdcIixcbiAgICBcInB1YmxpYy9hZG1pbi11c2Vycy1zdmdyZXBvLWNvbS5zdmdcIixcbiAgICBcInB1YmxpYy9kZXZpY2VzLXN2Z3JlcG8tY29tLnN2Z1wiLFxuICAgIFwicHVibGljL292ZXJ2aWV3LXN2Z3JlcG8tY29tLnN2Z1wiLFxuICAgIFwicHVibGljL3NoaWVsZC1lcnJvci1zdmdyZXBvLWNvbS5zdmdcIixcbiAgXTtcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICBmcy5jb3B5RmlsZVN5bmMoXG4gICAgICBwYXRoLnJlc29sdmUoSU5QVVRfRElSLCBmaWxlKSxcbiAgICAgIHBhdGgucmVzb2x2ZShPVVRQVVRfRElSLCBmaWxlKVxuICAgICk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVDc3MoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGNzc0luUGF0aCA9IHBhdGgucmVzb2x2ZShJTlBVVF9ESVIsIFwidWkvY3NzL2FwcC5jc3NcIik7XG4gIGNvbnN0IGNzc091dFBhdGggPSBwYXRoLnJlc29sdmUoT1VUUFVUX0RJUiwgXCJwdWJsaWMvYXBwLmNzc1wiKTtcbiAgY29uc3QgY3NzSW4gPSBmcy5yZWFkRmlsZVN5bmMoY3NzSW5QYXRoKTtcbiAgY29uc3QgY3NzT3V0ID0gYXdhaXQgcG9zdGNzcyhbXG4gICAgcG9zdGNzc0ltcG9ydCxcbiAgICBwb3N0Y3NzUHJlc2V0RW52KHtcbiAgICAgIHN0YWdlOiAzLFxuICAgICAgZmVhdHVyZXM6IHtcbiAgICAgICAgXCJuZXN0aW5nLXJ1bGVzXCI6IHRydWUsXG4gICAgICB9LFxuICAgIH0pLFxuICAgIHBvc3Rjc3NDb2xvck1vZCxcbiAgICAuLi4oTU9ERSA9PT0gXCJwcm9kdWN0aW9uXCIgPyBbY3NzbmFub10gOiBbXSksXG4gIF0pLnByb2Nlc3MoY3NzSW4sIHsgZnJvbTogY3NzSW5QYXRoLCB0bzogY3NzT3V0UGF0aCB9KTtcbiAgZnMud3JpdGVGaWxlU3luYyhjc3NPdXRQYXRoLCBjc3NPdXQuY3NzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVCYWNrZW5kSnMoZXh0ZXJuYWxzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICBmb3IgKGNvbnN0IGJpbiBvZiBbXG4gICAgXCJnZW5pZWFjcy1jd21wXCIsXG4gICAgXCJnZW5pZWFjcy1leHRcIixcbiAgICBcImdlbmllYWNzLW5iaVwiLFxuICAgIFwiZ2VuaWVhY3MtZnNcIixcbiAgICBcImdlbmllYWNzLXVpXCIsXG4gIF0pIHtcbiAgICBjb25zdCBpbnB1dEZpbGUgPSBwYXRoLnJlc29sdmUoSU5QVVRfRElSLCBgYmluLyR7YmlufS50c2ApO1xuICAgIGNvbnN0IG91dHB1dEZpbGUgPSBwYXRoLnJlc29sdmUoT1VUUFVUX0RJUiwgYGJpbi8ke2Jpbn1gKTtcbiAgICBjb25zdCBidW5kbGUgPSBhd2FpdCByb2xsdXAoe1xuICAgICAgaW5wdXQ6IGlucHV0RmlsZSxcbiAgICAgIGV4dGVybmFsOiBbLi4uYnVpbHRpbnMsIC4uLmV4dGVybmFsc10sXG4gICAgICBhY29ybjoge1xuICAgICAgICBhbGxvd0hhc2hCYW5nOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHRyZWVzaGFrZToge1xuICAgICAgICBwcm9wZXJ0eVJlYWRTaWRlRWZmZWN0czogZmFsc2UsXG4gICAgICAgIG1vZHVsZVNpZGVFZmZlY3RzOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBwbHVnaW5zOiBbXG4gICAgICAgIHJvbGx1cEpzb24oeyBwcmVmZXJDb25zdDogdHJ1ZSB9KSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgcmVzb2x2ZUlkOiAoaW1wb3J0ZWUsIGltcG9ydGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW1wb3J0ZWUuZW5kc1dpdGgoXCIvcGFja2FnZS5qc29uXCIpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHAgPSBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKGltcG9ydGVyKSwgaW1wb3J0ZWUpO1xuICAgICAgICAgICAgICBpZiAocCA9PT0gcGF0aC5yZXNvbHZlKElOUFVUX0RJUiwgXCJwYWNrYWdlLmpzb25cIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZShPVVRQVVRfRElSLCBcInBhY2thZ2UuanNvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGVzY3JpcHQoe1xuICAgICAgICAgIHRzY29uZmlnOiBcIi4vdHNjb25maWcuanNvblwiLFxuICAgICAgICAgIGluY2x1ZGU6IFtgYmluLyR7YmlufS50c2AsIFwibGliLyoqLyoudHNcIl0sXG4gICAgICAgIH0pLFxuICAgICAgICBNT0RFID09PSBcInByb2R1Y3Rpb25cIiA/IHRlcnNlcigpIDogbnVsbCxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBhd2FpdCBidW5kbGUud3JpdGUoe1xuICAgICAgZm9ybWF0OiBcImNqc1wiLFxuICAgICAgcHJlZmVyQ29uc3Q6IHRydWUsXG4gICAgICBzb3VyY2VtYXA6IFwiaW5saW5lXCIsXG4gICAgICBzb3VyY2VtYXBFeGNsdWRlU291cmNlczogdHJ1ZSxcbiAgICAgIGJhbm5lcjogXCIjIS91c3IvYmluL2VudiBub2RlXCIsXG4gICAgICBmaWxlOiBvdXRwdXRGaWxlLFxuICAgIH0pO1xuXG4gICAgLy8gTWFyayBhcyBleGVjdXRhYmxlXG4gICAgY29uc3QgbW9kZSA9IGZzLnN0YXRTeW5jKG91dHB1dEZpbGUpLm1vZGU7XG4gICAgZnMuY2htb2RTeW5jKG91dHB1dEZpbGUsIG1vZGUgfCA3Myk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVGcm9udGVuZEpzKGV4dGVybmFsczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgaW5wdXRGaWxlID0gcGF0aC5yZXNvbHZlKElOUFVUX0RJUiwgXCJ1aS9hcHAudHNcIik7XG4gIGNvbnN0IG91dHB1dERpciA9IHBhdGgucmVzb2x2ZShPVVRQVVRfRElSLCBcInB1YmxpY1wiKTtcblxuICBjb25zdCBpbmxpbmVEZXBzID0gW1wicGFyc2ltbW9uXCIsIFwiZXNwcmVzc28taWlzb2pzXCJdO1xuICBjb25zdCBidW5kbGUgPSBhd2FpdCByb2xsdXAoe1xuICAgIGlucHV0OiBpbnB1dEZpbGUsXG4gICAgZXh0ZXJuYWw6IFtcbiAgICAgIC4uLmJ1aWx0aW5zLFxuICAgICAgLi4uZXh0ZXJuYWxzLmZpbHRlcigoZSkgPT4gIWlubGluZURlcHMuaW5jbHVkZXMoZSkpLFxuICAgIF0sXG4gICAgcGx1Z2luczogW1xuICAgICAgcm9sbHVwSnNvbih7IHByZWZlckNvbnN0OiB0cnVlIH0pLFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICByZXNvbHZlSWQ6IGZ1bmN0aW9uIChpbXBvcnRlZSwgaW1wb3J0ZXIpIHtcbiAgICAgICAgICBpZiAoaW1wb3J0ZWUuZW5kc1dpdGgoXCIvcGFja2FnZS5qc29uXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShpbXBvcnRlciksIGltcG9ydGVlKTtcbiAgICAgICAgICAgIGlmIChwID09PSBwYXRoLnJlc29sdmUoSU5QVVRfRElSLCBcInBhY2thZ2UuanNvblwiKSlcbiAgICAgICAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZShPVVRQVVRfRElSLCBcInBhY2thZ2UuanNvblwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdHlwZXNjcmlwdCh7IHRzY29uZmlnOiBcIi4vdHNjb25maWcuanNvblwiIH0pLFxuICAgICAgbm9kZVJlc29sdmUoKSxcbiAgICAgIGNvbW1vbmpzKCksXG4gICAgICBNT0RFID09PSBcInByb2R1Y3Rpb25cIiA/IHRlcnNlcigpIDogbnVsbCxcbiAgICBdLFxuICAgIHByZXNlcnZlRW50cnlTaWduYXR1cmVzOiBmYWxzZSxcbiAgICB0cmVlc2hha2U6IHtcbiAgICAgIHByb3BlcnR5UmVhZFNpZGVFZmZlY3RzOiBmYWxzZSxcbiAgICAgIG1vZHVsZVNpZGVFZmZlY3RzOiBmYWxzZSxcbiAgICB9LFxuICAgIG9ud2FybjogKCh3YXJuaW5nLCB3YXJuKSA9PiB7XG4gICAgICAvLyBJZ25vcmUgY2lyY3VsYXIgZGVwZW5kZW5jeSB3YXJuaW5nc1xuICAgICAgaWYgKHdhcm5pbmcuY29kZSAhPT0gXCJDSVJDVUxBUl9ERVBFTkRFTkNZXCIpIHdhcm4od2FybmluZyk7XG4gICAgfSkgYXMgV2FybmluZ0hhbmRsZXIsXG4gIH0pO1xuXG4gIGF3YWl0IGJ1bmRsZS53cml0ZSh7XG4gICAgbWFudWFsQ2h1bmtzOiAoaWQpID0+IHtcbiAgICAgIGlmIChpZC5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlcy9jb2RlbWlycm9yXCIpKSByZXR1cm4gXCJjb2RlbWlycm9yXCI7XG4gICAgICBlbHNlIGlmIChpZC5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlcy95YW1sXCIpKSByZXR1cm4gXCJ5YW1sXCI7XG4gICAgICByZXR1cm4gXCJhcHBcIjtcbiAgICB9LFxuICAgIHByZWZlckNvbnN0OiB0cnVlLFxuICAgIGZvcm1hdDogXCJlc1wiLFxuICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICBzb3VyY2VtYXBFeGNsdWRlU291cmNlczogdHJ1ZSxcbiAgICBkaXI6IG91dHB1dERpcixcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlSWNvbnNTcHJpdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHN5bWJvbHMgPSBbXTtcbiAgY29uc3QgaWNvbnNEaXIgPSBwYXRoLnJlc29sdmUoSU5QVVRfRElSLCBcInVpL2ljb25zXCIpO1xuICBmb3IgKGNvbnN0IGZpbGUgb2YgZnMucmVhZGRpclN5bmMoaWNvbnNEaXIpKSB7XG4gICAgY29uc3QgaWQgPSBwYXRoLnBhcnNlKGZpbGUpLm5hbWU7XG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oaWNvbnNEaXIsIGZpbGUpO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgb3B0aW1pemUoZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoKS50b1N0cmluZygpLCB7XG4gICAgICBwbHVnaW5zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcInByZXNldC1kZWZhdWx0XCIsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAgICAgcmVtb3ZlVmlld0JveDogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICAgIHN5bWJvbHMucHVzaChnZW5lcmF0ZVN5bWJvbChpZCwgZGF0YSkpO1xuICB9XG4gIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgcGF0aC5yZXNvbHZlKE9VVFBVVF9ESVIsIFwicHVibGljL2ljb25zLnN2Z1wiKSxcbiAgICBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+JHtzeW1ib2xzLmpvaW4oXCJcIil9PC9zdmc+YFxuICApO1xufVxuXG5pbml0KClcbiAgLnRoZW4oKGV4dGVybmFscykgPT4ge1xuICAgIFByb21pc2UuYWxsKFtcbiAgICAgIGNvcHlTdGF0aWMoKSxcbiAgICAgIGdlbmVyYXRlQ3NzKCksXG4gICAgICBnZW5lcmF0ZUljb25zU3ByaXRlKCksXG4gICAgICBnZW5lcmF0ZUJhY2tlbmRKcyhleHRlcm5hbHMpLFxuICAgICAgZ2VuZXJhdGVGcm9udGVuZEpzKGV4dGVybmFscyksXG4gICAgXSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gSWdub3JlXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoZXJyLnN0YWNrICsgXCJcXG5cIik7XG4gICAgICB9KTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShlcnIuc3RhY2sgKyBcIlxcblwiKTtcbiAgfSk7XG4iXX0=